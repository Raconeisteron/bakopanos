//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This file contains the strongly-typed dataset class.
// The TableAdapters and Dataset Designer (.xsd) file are in the NW247.Data project. 
//
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace NW247.Model
{
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [XmlSchemaProvider("GetTypedDataSetSchema")]
    [XmlRoot("NorthwindDataSet")]
    [HelpKeyword("vs.data.DataSet")]
    public class NorthwindDataSet : DataSet
    {
        #region Delegates

        public delegate void CategoriesRowChangeEventHandler(object sender, CategoriesRowChangeEvent e);

        public delegate void CustomerCustomerDemoRowChangeEventHandler(
            object sender, CustomerCustomerDemoRowChangeEvent e);

        public delegate void CustomerDemographicsRowChangeEventHandler(
            object sender, CustomerDemographicsRowChangeEvent e);

        public delegate void CustomersRowChangeEventHandler(object sender, CustomersRowChangeEvent e);

        public delegate void EmployeesRowChangeEventHandler(object sender, EmployeesRowChangeEvent e);

        public delegate void EmployeeTerritoriesRowChangeEventHandler(object sender, EmployeeTerritoriesRowChangeEvent e
            );

        public delegate void Order_DetailsRowChangeEventHandler(object sender, Order_DetailsRowChangeEvent e);

        public delegate void OrdersRowChangeEventHandler(object sender, OrdersRowChangeEvent e);

        public delegate void ProductsRowChangeEventHandler(object sender, ProductsRowChangeEvent e);

        public delegate void RegionRowChangeEventHandler(object sender, RegionRowChangeEvent e);

        public delegate void ShippersRowChangeEventHandler(object sender, ShippersRowChangeEvent e);

        public delegate void SuppliersRowChangeEventHandler(object sender, SuppliersRowChangeEvent e);

        public delegate void TerritoriesRowChangeEventHandler(object sender, TerritoriesRowChangeEvent e);

        #endregion

        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        private DataRelation relationFK_CustomerCustomerDemo;

        private DataRelation relationFK_CustomerCustomerDemo_Customers;

        private DataRelation relationFK_Employees_Employees;

        private DataRelation relationFK_EmployeeTerritories_Employees;

        private DataRelation relationFK_EmployeeTerritories_Territories;

        private DataRelation relationFK_Order_Details_Orders;

        private DataRelation relationFK_Order_Details_Products;

        private DataRelation relationFK_Orders_Customers;

        private DataRelation relationFK_Orders_Employees;

        private DataRelation relationFK_Orders_Shippers;

        private DataRelation relationFK_Products_Categories;

        private DataRelation relationFK_Products_Suppliers;

        private DataRelation relationFK_Territories_Region;
        private CategoriesDataTable tableCategories;

        private CustomerCustomerDemoDataTable tableCustomerCustomerDemo;

        private CustomerDemographicsDataTable tableCustomerDemographics;

        private CustomersDataTable tableCustomers;

        private EmployeesDataTable tableEmployees;

        private EmployeeTerritoriesDataTable tableEmployeeTerritories;

        private Order_DetailsDataTable tableOrder_Details;

        private OrdersDataTable tableOrders;

        private ProductsDataTable tableProducts;

        private RegionDataTable tableRegion;

        private ShippersDataTable tableShippers;

        private SuppliersDataTable tableSuppliers;

        private TerritoriesDataTable tableTerritories;

        [DebuggerNonUserCode]
        public NorthwindDataSet()
        {
            BeginInit();
            InitClass();
            CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode]
        protected NorthwindDataSet(SerializationInfo info, StreamingContext context) :
            base(info, context, false)
        {
            if (IsBinarySerialized(info, context))
            {
                InitVars(false);
                CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged += schemaChangedHandler1;
                Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            var strSchema = ((string) (info.GetValue("XmlSchema", typeof (string))));
            if ((DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema))
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
                if ((ds.Tables["Categories"] != null))
                {
                    base.Tables.Add(new CategoriesDataTable(ds.Tables["Categories"]));
                }
                if ((ds.Tables["CustomerCustomerDemo"] != null))
                {
                    base.Tables.Add(new CustomerCustomerDemoDataTable(ds.Tables["CustomerCustomerDemo"]));
                }
                if ((ds.Tables["CustomerDemographics"] != null))
                {
                    base.Tables.Add(new CustomerDemographicsDataTable(ds.Tables["CustomerDemographics"]));
                }
                if ((ds.Tables["Customers"] != null))
                {
                    base.Tables.Add(new CustomersDataTable(ds.Tables["Customers"]));
                }
                if ((ds.Tables["Employees"] != null))
                {
                    base.Tables.Add(new EmployeesDataTable(ds.Tables["Employees"]));
                }
                if ((ds.Tables["EmployeeTerritories"] != null))
                {
                    base.Tables.Add(new EmployeeTerritoriesDataTable(ds.Tables["EmployeeTerritories"]));
                }
                if ((ds.Tables["Order Details"] != null))
                {
                    base.Tables.Add(new Order_DetailsDataTable(ds.Tables["Order Details"]));
                }
                if ((ds.Tables["Orders"] != null))
                {
                    base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                if ((ds.Tables["Products"] != null))
                {
                    base.Tables.Add(new ProductsDataTable(ds.Tables["Products"]));
                }
                if ((ds.Tables["Region"] != null))
                {
                    base.Tables.Add(new RegionDataTable(ds.Tables["Region"]));
                }
                if ((ds.Tables["Shippers"] != null))
                {
                    base.Tables.Add(new ShippersDataTable(ds.Tables["Shippers"]));
                }
                if ((ds.Tables["Suppliers"] != null))
                {
                    base.Tables.Add(new SuppliersDataTable(ds.Tables["Suppliers"]));
                }
                if ((ds.Tables["Territories"] != null))
                {
                    base.Tables.Add(new TerritoriesDataTable(ds.Tables["Territories"]));
                }
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
            }
            GetSerializationData(info, context);
            CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public CategoriesDataTable Categories
        {
            get { return tableCategories; }
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public CustomerCustomerDemoDataTable CustomerCustomerDemo
        {
            get { return tableCustomerCustomerDemo; }
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public CustomerDemographicsDataTable CustomerDemographics
        {
            get { return tableCustomerDemographics; }
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public CustomersDataTable Customers
        {
            get { return tableCustomers; }
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public EmployeesDataTable Employees
        {
            get { return tableEmployees; }
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public EmployeeTerritoriesDataTable EmployeeTerritories
        {
            get { return tableEmployeeTerritories; }
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public Order_DetailsDataTable Order_Details
        {
            get { return tableOrder_Details; }
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public OrdersDataTable Orders
        {
            get { return tableOrders; }
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ProductsDataTable Products
        {
            get { return tableProducts; }
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public RegionDataTable Region
        {
            get { return tableRegion; }
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ShippersDataTable Shippers
        {
            get { return tableShippers; }
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public SuppliersDataTable Suppliers
        {
            get { return tableSuppliers; }
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public TerritoriesDataTable Territories
        {
            get { return tableTerritories; }
        }

        [DebuggerNonUserCode]
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get { return _schemaSerializationMode; }
            set { _schemaSerializationMode = value; }
        }

        [DebuggerNonUserCode]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get { return base.Tables; }
        }

        [DebuggerNonUserCode]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get { return base.Relations; }
        }

        [DebuggerNonUserCode]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode]
        public override DataSet Clone()
        {
            var cln = ((NorthwindDataSet) (base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode]
        protected override void ReadXmlSerializable(XmlReader reader)
        {
            if ((DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema))
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Categories"] != null))
                {
                    base.Tables.Add(new CategoriesDataTable(ds.Tables["Categories"]));
                }
                if ((ds.Tables["CustomerCustomerDemo"] != null))
                {
                    base.Tables.Add(new CustomerCustomerDemoDataTable(ds.Tables["CustomerCustomerDemo"]));
                }
                if ((ds.Tables["CustomerDemographics"] != null))
                {
                    base.Tables.Add(new CustomerDemographicsDataTable(ds.Tables["CustomerDemographics"]));
                }
                if ((ds.Tables["Customers"] != null))
                {
                    base.Tables.Add(new CustomersDataTable(ds.Tables["Customers"]));
                }
                if ((ds.Tables["Employees"] != null))
                {
                    base.Tables.Add(new EmployeesDataTable(ds.Tables["Employees"]));
                }
                if ((ds.Tables["EmployeeTerritories"] != null))
                {
                    base.Tables.Add(new EmployeeTerritoriesDataTable(ds.Tables["EmployeeTerritories"]));
                }
                if ((ds.Tables["Order Details"] != null))
                {
                    base.Tables.Add(new Order_DetailsDataTable(ds.Tables["Order Details"]));
                }
                if ((ds.Tables["Orders"] != null))
                {
                    base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                if ((ds.Tables["Products"] != null))
                {
                    base.Tables.Add(new ProductsDataTable(ds.Tables["Products"]));
                }
                if ((ds.Tables["Region"] != null))
                {
                    base.Tables.Add(new RegionDataTable(ds.Tables["Region"]));
                }
                if ((ds.Tables["Shippers"] != null))
                {
                    base.Tables.Add(new ShippersDataTable(ds.Tables["Shippers"]));
                }
                if ((ds.Tables["Suppliers"] != null))
                {
                    base.Tables.Add(new SuppliersDataTable(ds.Tables["Suppliers"]));
                }
                if ((ds.Tables["Territories"] != null))
                {
                    base.Tables.Add(new TerritoriesDataTable(ds.Tables["Territories"]));
                }
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode]
        protected override XmlSchema GetSchemaSerializable()
        {
            var stream = new MemoryStream();
            WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return XmlSchema.Read(new XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode]
        internal void InitVars(bool initTable)
        {
            tableCategories = ((CategoriesDataTable) (base.Tables["Categories"]));
            if (initTable)
            {
                if ((tableCategories != null))
                {
                    tableCategories.InitVars();
                }
            }
            tableCustomerCustomerDemo = ((CustomerCustomerDemoDataTable) (base.Tables["CustomerCustomerDemo"]));
            if (initTable)
            {
                if ((tableCustomerCustomerDemo != null))
                {
                    tableCustomerCustomerDemo.InitVars();
                }
            }
            tableCustomerDemographics = ((CustomerDemographicsDataTable) (base.Tables["CustomerDemographics"]));
            if (initTable)
            {
                if ((tableCustomerDemographics != null))
                {
                    tableCustomerDemographics.InitVars();
                }
            }
            tableCustomers = ((CustomersDataTable) (base.Tables["Customers"]));
            if (initTable)
            {
                if ((tableCustomers != null))
                {
                    tableCustomers.InitVars();
                }
            }
            tableEmployees = ((EmployeesDataTable) (base.Tables["Employees"]));
            if (initTable)
            {
                if ((tableEmployees != null))
                {
                    tableEmployees.InitVars();
                }
            }
            tableEmployeeTerritories = ((EmployeeTerritoriesDataTable) (base.Tables["EmployeeTerritories"]));
            if (initTable)
            {
                if ((tableEmployeeTerritories != null))
                {
                    tableEmployeeTerritories.InitVars();
                }
            }
            tableOrder_Details = ((Order_DetailsDataTable) (base.Tables["Order Details"]));
            if (initTable)
            {
                if ((tableOrder_Details != null))
                {
                    tableOrder_Details.InitVars();
                }
            }
            tableOrders = ((OrdersDataTable) (base.Tables["Orders"]));
            if (initTable)
            {
                if ((tableOrders != null))
                {
                    tableOrders.InitVars();
                }
            }
            tableProducts = ((ProductsDataTable) (base.Tables["Products"]));
            if (initTable)
            {
                if ((tableProducts != null))
                {
                    tableProducts.InitVars();
                }
            }
            tableRegion = ((RegionDataTable) (base.Tables["Region"]));
            if (initTable)
            {
                if ((tableRegion != null))
                {
                    tableRegion.InitVars();
                }
            }
            tableShippers = ((ShippersDataTable) (base.Tables["Shippers"]));
            if (initTable)
            {
                if ((tableShippers != null))
                {
                    tableShippers.InitVars();
                }
            }
            tableSuppliers = ((SuppliersDataTable) (base.Tables["Suppliers"]));
            if (initTable)
            {
                if ((tableSuppliers != null))
                {
                    tableSuppliers.InitVars();
                }
            }
            tableTerritories = ((TerritoriesDataTable) (base.Tables["Territories"]));
            if (initTable)
            {
                if ((tableTerritories != null))
                {
                    tableTerritories.InitVars();
                }
            }
            relationFK_CustomerCustomerDemo = Relations["FK_CustomerCustomerDemo"];
            relationFK_CustomerCustomerDemo_Customers = Relations["FK_CustomerCustomerDemo_Customers"];
            relationFK_Employees_Employees = Relations["FK_Employees_Employees"];
            relationFK_EmployeeTerritories_Employees = Relations["FK_EmployeeTerritories_Employees"];
            relationFK_EmployeeTerritories_Territories = Relations["FK_EmployeeTerritories_Territories"];
            relationFK_Order_Details_Orders = Relations["FK_Order_Details_Orders"];
            relationFK_Order_Details_Products = Relations["FK_Order_Details_Products"];
            relationFK_Orders_Customers = Relations["FK_Orders_Customers"];
            relationFK_Orders_Employees = Relations["FK_Orders_Employees"];
            relationFK_Orders_Shippers = Relations["FK_Orders_Shippers"];
            relationFK_Products_Categories = Relations["FK_Products_Categories"];
            relationFK_Products_Suppliers = Relations["FK_Products_Suppliers"];
            relationFK_Territories_Region = Relations["FK_Territories_Region"];
        }

        [DebuggerNonUserCode]
        private void InitClass()
        {
            DataSetName = "NorthwindDataSet";
            Prefix = "";
            Namespace = "http://tempuri.org/NorthwindDataSet.xsd";
            EnforceConstraints = true;
            SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            tableCategories = new CategoriesDataTable();
            base.Tables.Add(tableCategories);
            tableCustomerCustomerDemo = new CustomerCustomerDemoDataTable();
            base.Tables.Add(tableCustomerCustomerDemo);
            tableCustomerDemographics = new CustomerDemographicsDataTable();
            base.Tables.Add(tableCustomerDemographics);
            tableCustomers = new CustomersDataTable();
            base.Tables.Add(tableCustomers);
            tableEmployees = new EmployeesDataTable();
            base.Tables.Add(tableEmployees);
            tableEmployeeTerritories = new EmployeeTerritoriesDataTable();
            base.Tables.Add(tableEmployeeTerritories);
            tableOrder_Details = new Order_DetailsDataTable();
            base.Tables.Add(tableOrder_Details);
            tableOrders = new OrdersDataTable();
            base.Tables.Add(tableOrders);
            tableProducts = new ProductsDataTable();
            base.Tables.Add(tableProducts);
            tableRegion = new RegionDataTable();
            base.Tables.Add(tableRegion);
            tableShippers = new ShippersDataTable();
            base.Tables.Add(tableShippers);
            tableSuppliers = new SuppliersDataTable();
            base.Tables.Add(tableSuppliers);
            tableTerritories = new TerritoriesDataTable();
            base.Tables.Add(tableTerritories);
            relationFK_CustomerCustomerDemo = new DataRelation("FK_CustomerCustomerDemo", new[]
                                                                                              {
                                                                                                  tableCustomerDemographics
                                                                                                      .
                                                                                                      CustomerTypeIDColumn
                                                                                              }, new[]
                                                                                                     {
                                                                                                         tableCustomerCustomerDemo
                                                                                                             .
                                                                                                             CustomerTypeIDColumn
                                                                                                     }, false);
            Relations.Add(relationFK_CustomerCustomerDemo);
            relationFK_CustomerCustomerDemo_Customers = new DataRelation("FK_CustomerCustomerDemo_Customers", new[]
                                                                                                                  {
                                                                                                                      tableCustomers
                                                                                                                          .
                                                                                                                          CustomerIDColumn
                                                                                                                  },
                                                                         new[]
                                                                             {
                                                                                 tableCustomerCustomerDemo.
                                                                                     CustomerIDColumn
                                                                             }, false);
            Relations.Add(relationFK_CustomerCustomerDemo_Customers);
            relationFK_Employees_Employees = new DataRelation("FK_Employees_Employees", new[]
                                                                                            {
                                                                                                tableEmployees.
                                                                                                    EmployeeIDColumn
                                                                                            }, new[]
                                                                                                   {
                                                                                                       tableEmployees.
                                                                                                           ReportsToColumn
                                                                                                   }, false);
            Relations.Add(relationFK_Employees_Employees);
            relationFK_EmployeeTerritories_Employees = new DataRelation("FK_EmployeeTerritories_Employees", new[]
                                                                                                                {
                                                                                                                    tableEmployees
                                                                                                                        .
                                                                                                                        EmployeeIDColumn
                                                                                                                }, new[]
                                                                                                                       {
                                                                                                                           tableEmployeeTerritories
                                                                                                                               .
                                                                                                                               EmployeeIDColumn
                                                                                                                       },
                                                                        false);
            Relations.Add(relationFK_EmployeeTerritories_Employees);
            relationFK_EmployeeTerritories_Territories = new DataRelation("FK_EmployeeTerritories_Territories", new[]
                                                                                                                    {
                                                                                                                        tableTerritories
                                                                                                                            .
                                                                                                                            TerritoryIDColumn
                                                                                                                    },
                                                                          new[]
                                                                              {
                                                                                  tableEmployeeTerritories.
                                                                                      TerritoryIDColumn
                                                                              }, false);
            Relations.Add(relationFK_EmployeeTerritories_Territories);
            relationFK_Order_Details_Orders = new DataRelation("FK_Order_Details_Orders", new[]
                                                                                              {
                                                                                                  tableOrders.
                                                                                                      OrderIDColumn
                                                                                              }, new[]
                                                                                                     {
                                                                                                         tableOrder_Details
                                                                                                             .
                                                                                                             OrderIDColumn
                                                                                                     }, false);
            Relations.Add(relationFK_Order_Details_Orders);
            relationFK_Order_Details_Products = new DataRelation("FK_Order_Details_Products", new[]
                                                                                                  {
                                                                                                      tableProducts.
                                                                                                          ProductIDColumn
                                                                                                  }, new[]
                                                                                                         {
                                                                                                             tableOrder_Details
                                                                                                                 .
                                                                                                                 ProductIDColumn
                                                                                                         }, false);
            Relations.Add(relationFK_Order_Details_Products);
            relationFK_Orders_Customers = new DataRelation("FK_Orders_Customers", new[]
                                                                                      {
                                                                                          tableCustomers.
                                                                                              CustomerIDColumn
                                                                                      }, new[]
                                                                                             {
                                                                                                 tableOrders.
                                                                                                     CustomerIDColumn
                                                                                             }, false);
            Relations.Add(relationFK_Orders_Customers);
            relationFK_Orders_Employees = new DataRelation("FK_Orders_Employees", new[]
                                                                                      {
                                                                                          tableEmployees.
                                                                                              EmployeeIDColumn
                                                                                      }, new[]
                                                                                             {
                                                                                                 tableOrders.
                                                                                                     EmployeeIDColumn
                                                                                             }, false);
            Relations.Add(relationFK_Orders_Employees);
            relationFK_Orders_Shippers = new DataRelation("FK_Orders_Shippers", new[]
                                                                                    {
                                                                                        tableShippers.ShipperIDColumn
                                                                                    }, new[]
                                                                                           {
                                                                                               tableOrders.ShipViaColumn
                                                                                           }, false);
            Relations.Add(relationFK_Orders_Shippers);
            relationFK_Products_Categories = new DataRelation("FK_Products_Categories", new[]
                                                                                            {
                                                                                                tableCategories.
                                                                                                    CategoryIDColumn
                                                                                            }, new[]
                                                                                                   {
                                                                                                       tableProducts.
                                                                                                           CategoryIDColumn
                                                                                                   }, false);
            Relations.Add(relationFK_Products_Categories);
            relationFK_Products_Suppliers = new DataRelation("FK_Products_Suppliers", new[]
                                                                                          {
                                                                                              tableSuppliers.
                                                                                                  SupplierIDColumn
                                                                                          }, new[]
                                                                                                 {
                                                                                                     tableProducts.
                                                                                                         SupplierIDColumn
                                                                                                 }, false);
            Relations.Add(relationFK_Products_Suppliers);
            relationFK_Territories_Region = new DataRelation("FK_Territories_Region", new[]
                                                                                          {
                                                                                              tableRegion.RegionIDColumn
                                                                                          }, new[]
                                                                                                 {
                                                                                                     tableTerritories.
                                                                                                         RegionIDColumn
                                                                                                 }, false);
            Relations.Add(relationFK_Territories_Region);
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeCategories()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeCustomerCustomerDemo()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeCustomerDemographics()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeCustomers()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeEmployees()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeEmployeeTerritories()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeOrder_Details()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeOrders()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeProducts()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeRegion()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeShippers()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeSuppliers()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeTerritories()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private void SchemaChanged(object sender, CollectionChangeEventArgs e)
        {
            if ((e.Action == CollectionChangeAction.Remove))
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode]
        public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
        {
            var ds = new NorthwindDataSet();
            var type = new XmlSchemaComplexType();
            var sequence = new XmlSchemaSequence();
            var any = new XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new MemoryStream();
                var s2 = new MemoryStream();
                try
                {
                    XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                         schemas.MoveNext();)
                    {
                        schema = ((XmlSchema) (schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length))
                        {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (;
                                ((s1.Position != s1.Length)
                                 && (s1.ReadByte() == s2.ReadByte()));)
                            {
                                ;
                            }
                            if ((s1.Position == s1.Length))
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if ((s1 != null))
                    {
                        s1.Close();
                    }
                    if ((s2 != null))
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        #region Nested type: CategoriesDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class CategoriesDataTable : TypedTableBase<CategoriesRow>
        {
            private DataColumn columnCategoryID;

            private DataColumn columnCategoryName;

            private DataColumn columnDescription;

            private DataColumn columnPicture;

            [DebuggerNonUserCode]
            public CategoriesDataTable()
            {
                TableName = "Categories";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal CategoriesDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected CategoriesDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn CategoryIDColumn
            {
                get { return columnCategoryID; }
            }

            [DebuggerNonUserCode]
            public DataColumn CategoryNameColumn
            {
                get { return columnCategoryName; }
            }

            [DebuggerNonUserCode]
            public DataColumn DescriptionColumn
            {
                get { return columnDescription; }
            }

            [DebuggerNonUserCode]
            public DataColumn PictureColumn
            {
                get { return columnPicture; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public CategoriesRow this[int index]
            {
                get { return ((CategoriesRow) (Rows[index])); }
            }

            public event CategoriesRowChangeEventHandler CategoriesRowChanging;

            public event CategoriesRowChangeEventHandler CategoriesRowChanged;

            public event CategoriesRowChangeEventHandler CategoriesRowDeleting;

            public event CategoriesRowChangeEventHandler CategoriesRowDeleted;

            [DebuggerNonUserCode]
            public void AddCategoriesRow(CategoriesRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public CategoriesRow AddCategoriesRow(string CategoryName, string Description, byte[] Picture)
            {
                var rowCategoriesRow = ((CategoriesRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                null,
                                                CategoryName,
                                                Description,
                                                Picture
                                            };
                rowCategoriesRow.ItemArray = columnValuesArray;
                Rows.Add(rowCategoriesRow);
                return rowCategoriesRow;
            }

            [DebuggerNonUserCode]
            public CategoriesRow FindByCategoryID(int CategoryID)
            {
                return ((CategoriesRow) (Rows.Find(new object[]
                                                       {
                                                           CategoryID
                                                       })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((CategoriesDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CategoriesDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnCategoryID = base.Columns["CategoryID"];
                columnCategoryName = base.Columns["CategoryName"];
                columnDescription = base.Columns["Description"];
                columnPicture = base.Columns["Picture"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnCategoryID = new DataColumn("CategoryID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnCategoryID);
                columnCategoryName = new DataColumn("CategoryName", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCategoryName);
                columnDescription = new DataColumn("Description", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnDescription);
                columnPicture = new DataColumn("Picture", typeof (byte[]), null, MappingType.Element);
                base.Columns.Add(columnPicture);
                Constraints.Add(new UniqueConstraint("Constraint1", new[]
                                                                        {
                                                                            columnCategoryID
                                                                        }, true));
                columnCategoryID.AutoIncrement = true;
                columnCategoryID.AutoIncrementSeed = -1;
                columnCategoryID.AutoIncrementStep = -1;
                columnCategoryID.AllowDBNull = false;
                columnCategoryID.ReadOnly = true;
                columnCategoryID.Unique = true;
                columnCategoryName.AllowDBNull = false;
                columnCategoryName.MaxLength = 15;
                columnDescription.MaxLength = 1073741823;
            }

            [DebuggerNonUserCode]
            public CategoriesRow NewCategoriesRow()
            {
                return ((CategoriesRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CategoriesRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof (CategoriesRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((CategoriesRowChanged != null))
                {
                    CategoriesRowChanged(this, new CategoriesRowChangeEvent(((CategoriesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((CategoriesRowChanging != null))
                {
                    CategoriesRowChanging(this, new CategoriesRowChangeEvent(((CategoriesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((CategoriesRowDeleted != null))
                {
                    CategoriesRowDeleted(this, new CategoriesRowChangeEvent(((CategoriesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((CategoriesRowDeleting != null))
                {
                    CategoriesRowDeleting(this, new CategoriesRowChangeEvent(((CategoriesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveCategoriesRow(CategoriesRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new NorthwindDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CategoriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                             schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: CategoriesRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CategoriesRow : DataRow
        {
            private readonly CategoriesDataTable tableCategories;

            [DebuggerNonUserCode]
            internal CategoriesRow(DataRowBuilder rb) :
                base(rb)
            {
                tableCategories = ((CategoriesDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public int CategoryID
            {
                get { return ((int) (this[tableCategories.CategoryIDColumn])); }
                set { this[tableCategories.CategoryIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string CategoryName
            {
                get { return ((string) (this[tableCategories.CategoryNameColumn])); }
                set { this[tableCategories.CategoryNameColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Description
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableCategories.DescriptionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Description\' in table \'Categories\' is DBNull.", e);
                    }
                }
                set { this[tableCategories.DescriptionColumn] = value; }
            }

            [DebuggerNonUserCode]
            public byte[] Picture
            {
                get
                {
                    try
                    {
                        return ((byte[]) (this[tableCategories.PictureColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Picture\' in table \'Categories\' is DBNull.", e);
                    }
                }
                set { this[tableCategories.PictureColumn] = value; }
            }

            [DebuggerNonUserCode]
            public bool IsDescriptionNull()
            {
                return IsNull(tableCategories.DescriptionColumn);
            }

            [DebuggerNonUserCode]
            public void SetDescriptionNull()
            {
                this[tableCategories.DescriptionColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsPictureNull()
            {
                return IsNull(tableCategories.PictureColumn);
            }

            [DebuggerNonUserCode]
            public void SetPictureNull()
            {
                this[tableCategories.PictureColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public ProductsRow[] GetProductsRows()
            {
                if ((Table.ChildRelations["FK_Products_Categories"] == null))
                {
                    return new ProductsRow[0];
                }
                else
                {
                    return ((ProductsRow[]) (base.GetChildRows(Table.ChildRelations["FK_Products_Categories"])));
                }
            }
        }

        #endregion

        #region Nested type: CategoriesRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CategoriesRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly CategoriesRow eventRow;

            [DebuggerNonUserCode]
            public CategoriesRowChangeEvent(CategoriesRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public CategoriesRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: CustomerCustomerDemoDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class CustomerCustomerDemoDataTable : TypedTableBase<CustomerCustomerDemoRow>
        {
            private DataColumn columnCustomerID;

            private DataColumn columnCustomerTypeID;

            [DebuggerNonUserCode]
            public CustomerCustomerDemoDataTable()
            {
                TableName = "CustomerCustomerDemo";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal CustomerCustomerDemoDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected CustomerCustomerDemoDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn CustomerIDColumn
            {
                get { return columnCustomerID; }
            }

            [DebuggerNonUserCode]
            public DataColumn CustomerTypeIDColumn
            {
                get { return columnCustomerTypeID; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public CustomerCustomerDemoRow this[int index]
            {
                get { return ((CustomerCustomerDemoRow) (Rows[index])); }
            }

            public event CustomerCustomerDemoRowChangeEventHandler CustomerCustomerDemoRowChanging;

            public event CustomerCustomerDemoRowChangeEventHandler CustomerCustomerDemoRowChanged;

            public event CustomerCustomerDemoRowChangeEventHandler CustomerCustomerDemoRowDeleting;

            public event CustomerCustomerDemoRowChangeEventHandler CustomerCustomerDemoRowDeleted;

            [DebuggerNonUserCode]
            public void AddCustomerCustomerDemoRow(CustomerCustomerDemoRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public CustomerCustomerDemoRow AddCustomerCustomerDemoRow(
                CustomersRow parentCustomersRowByFK_CustomerCustomerDemo_Customers,
                CustomerDemographicsRow parentCustomerDemographicsRowByFK_CustomerCustomerDemo)
            {
                var rowCustomerCustomerDemoRow = ((CustomerCustomerDemoRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                null,
                                                null
                                            };
                if ((parentCustomersRowByFK_CustomerCustomerDemo_Customers != null))
                {
                    columnValuesArray[0] = parentCustomersRowByFK_CustomerCustomerDemo_Customers[0];
                }
                if ((parentCustomerDemographicsRowByFK_CustomerCustomerDemo != null))
                {
                    columnValuesArray[1] = parentCustomerDemographicsRowByFK_CustomerCustomerDemo[0];
                }
                rowCustomerCustomerDemoRow.ItemArray = columnValuesArray;
                Rows.Add(rowCustomerCustomerDemoRow);
                return rowCustomerCustomerDemoRow;
            }

            [DebuggerNonUserCode]
            public CustomerCustomerDemoRow FindByCustomerIDCustomerTypeID(string CustomerID, string CustomerTypeID)
            {
                return ((CustomerCustomerDemoRow) (Rows.Find(new object[]
                                                                 {
                                                                     CustomerID,
                                                                     CustomerTypeID
                                                                 })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((CustomerCustomerDemoDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CustomerCustomerDemoDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnCustomerID = base.Columns["CustomerID"];
                columnCustomerTypeID = base.Columns["CustomerTypeID"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnCustomerID = new DataColumn("CustomerID", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCustomerID);
                columnCustomerTypeID = new DataColumn("CustomerTypeID", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCustomerTypeID);
                Constraints.Add(new UniqueConstraint("Constraint1", new[]
                                                                        {
                                                                            columnCustomerID,
                                                                            columnCustomerTypeID
                                                                        }, true));
                columnCustomerID.AllowDBNull = false;
                columnCustomerID.MaxLength = 5;
                columnCustomerTypeID.AllowDBNull = false;
                columnCustomerTypeID.MaxLength = 10;
            }

            [DebuggerNonUserCode]
            public CustomerCustomerDemoRow NewCustomerCustomerDemoRow()
            {
                return ((CustomerCustomerDemoRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CustomerCustomerDemoRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof (CustomerCustomerDemoRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((CustomerCustomerDemoRowChanged != null))
                {
                    CustomerCustomerDemoRowChanged(this,
                                                   new CustomerCustomerDemoRowChangeEvent(
                                                       ((CustomerCustomerDemoRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((CustomerCustomerDemoRowChanging != null))
                {
                    CustomerCustomerDemoRowChanging(this,
                                                    new CustomerCustomerDemoRowChangeEvent(
                                                        ((CustomerCustomerDemoRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((CustomerCustomerDemoRowDeleted != null))
                {
                    CustomerCustomerDemoRowDeleted(this,
                                                   new CustomerCustomerDemoRowChangeEvent(
                                                       ((CustomerCustomerDemoRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((CustomerCustomerDemoRowDeleting != null))
                {
                    CustomerCustomerDemoRowDeleting(this,
                                                    new CustomerCustomerDemoRowChangeEvent(
                                                        ((CustomerCustomerDemoRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveCustomerCustomerDemoRow(CustomerCustomerDemoRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new NorthwindDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerCustomerDemoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                             schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: CustomerCustomerDemoRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerCustomerDemoRow : DataRow
        {
            private readonly CustomerCustomerDemoDataTable tableCustomerCustomerDemo;

            [DebuggerNonUserCode]
            internal CustomerCustomerDemoRow(DataRowBuilder rb) :
                base(rb)
            {
                tableCustomerCustomerDemo = ((CustomerCustomerDemoDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public string CustomerID
            {
                get { return ((string) (this[tableCustomerCustomerDemo.CustomerIDColumn])); }
                set { this[tableCustomerCustomerDemo.CustomerIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string CustomerTypeID
            {
                get { return ((string) (this[tableCustomerCustomerDemo.CustomerTypeIDColumn])); }
                set { this[tableCustomerCustomerDemo.CustomerTypeIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public CustomerDemographicsRow CustomerDemographicsRow
            {
                get { return ((CustomerDemographicsRow) (GetParentRow(Table.ParentRelations["FK_CustomerCustomerDemo"]))); }
                set { SetParentRow(value, Table.ParentRelations["FK_CustomerCustomerDemo"]); }
            }

            [DebuggerNonUserCode]
            public CustomersRow CustomersRow
            {
                get { return ((CustomersRow) (GetParentRow(Table.ParentRelations["FK_CustomerCustomerDemo_Customers"]))); }
                set { SetParentRow(value, Table.ParentRelations["FK_CustomerCustomerDemo_Customers"]); }
            }
        }

        #endregion

        #region Nested type: CustomerCustomerDemoRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerCustomerDemoRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly CustomerCustomerDemoRow eventRow;

            [DebuggerNonUserCode]
            public CustomerCustomerDemoRowChangeEvent(CustomerCustomerDemoRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public CustomerCustomerDemoRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: CustomerDemographicsDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class CustomerDemographicsDataTable : TypedTableBase<CustomerDemographicsRow>
        {
            private DataColumn columnCustomerDesc;
            private DataColumn columnCustomerTypeID;

            [DebuggerNonUserCode]
            public CustomerDemographicsDataTable()
            {
                TableName = "CustomerDemographics";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal CustomerDemographicsDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected CustomerDemographicsDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn CustomerTypeIDColumn
            {
                get { return columnCustomerTypeID; }
            }

            [DebuggerNonUserCode]
            public DataColumn CustomerDescColumn
            {
                get { return columnCustomerDesc; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public CustomerDemographicsRow this[int index]
            {
                get { return ((CustomerDemographicsRow) (Rows[index])); }
            }

            public event CustomerDemographicsRowChangeEventHandler CustomerDemographicsRowChanging;

            public event CustomerDemographicsRowChangeEventHandler CustomerDemographicsRowChanged;

            public event CustomerDemographicsRowChangeEventHandler CustomerDemographicsRowDeleting;

            public event CustomerDemographicsRowChangeEventHandler CustomerDemographicsRowDeleted;

            [DebuggerNonUserCode]
            public void AddCustomerDemographicsRow(CustomerDemographicsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public CustomerDemographicsRow AddCustomerDemographicsRow(string CustomerTypeID, string CustomerDesc)
            {
                var rowCustomerDemographicsRow = ((CustomerDemographicsRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                CustomerTypeID,
                                                CustomerDesc
                                            };
                rowCustomerDemographicsRow.ItemArray = columnValuesArray;
                Rows.Add(rowCustomerDemographicsRow);
                return rowCustomerDemographicsRow;
            }

            [DebuggerNonUserCode]
            public CustomerDemographicsRow FindByCustomerTypeID(string CustomerTypeID)
            {
                return ((CustomerDemographicsRow) (Rows.Find(new object[]
                                                                 {
                                                                     CustomerTypeID
                                                                 })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((CustomerDemographicsDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CustomerDemographicsDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnCustomerTypeID = base.Columns["CustomerTypeID"];
                columnCustomerDesc = base.Columns["CustomerDesc"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnCustomerTypeID = new DataColumn("CustomerTypeID", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCustomerTypeID);
                columnCustomerDesc = new DataColumn("CustomerDesc", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCustomerDesc);
                Constraints.Add(new UniqueConstraint("Constraint1", new[]
                                                                        {
                                                                            columnCustomerTypeID
                                                                        }, true));
                columnCustomerTypeID.AllowDBNull = false;
                columnCustomerTypeID.Unique = true;
                columnCustomerTypeID.MaxLength = 10;
                columnCustomerDesc.MaxLength = 1073741823;
            }

            [DebuggerNonUserCode]
            public CustomerDemographicsRow NewCustomerDemographicsRow()
            {
                return ((CustomerDemographicsRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CustomerDemographicsRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof (CustomerDemographicsRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((CustomerDemographicsRowChanged != null))
                {
                    CustomerDemographicsRowChanged(this,
                                                   new CustomerDemographicsRowChangeEvent(
                                                       ((CustomerDemographicsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((CustomerDemographicsRowChanging != null))
                {
                    CustomerDemographicsRowChanging(this,
                                                    new CustomerDemographicsRowChangeEvent(
                                                        ((CustomerDemographicsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((CustomerDemographicsRowDeleted != null))
                {
                    CustomerDemographicsRowDeleted(this,
                                                   new CustomerDemographicsRowChangeEvent(
                                                       ((CustomerDemographicsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((CustomerDemographicsRowDeleting != null))
                {
                    CustomerDemographicsRowDeleting(this,
                                                    new CustomerDemographicsRowChangeEvent(
                                                        ((CustomerDemographicsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveCustomerDemographicsRow(CustomerDemographicsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new NorthwindDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerDemographicsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                             schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: CustomerDemographicsRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerDemographicsRow : DataRow
        {
            private readonly CustomerDemographicsDataTable tableCustomerDemographics;

            [DebuggerNonUserCode]
            internal CustomerDemographicsRow(DataRowBuilder rb) :
                base(rb)
            {
                tableCustomerDemographics = ((CustomerDemographicsDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public string CustomerTypeID
            {
                get { return ((string) (this[tableCustomerDemographics.CustomerTypeIDColumn])); }
                set { this[tableCustomerDemographics.CustomerTypeIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string CustomerDesc
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableCustomerDemographics.CustomerDescColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'CustomerDesc\' in table \'CustomerDemographics\' is DBNull.", e);
                    }
                }
                set { this[tableCustomerDemographics.CustomerDescColumn] = value; }
            }

            [DebuggerNonUserCode]
            public bool IsCustomerDescNull()
            {
                return IsNull(tableCustomerDemographics.CustomerDescColumn);
            }

            [DebuggerNonUserCode]
            public void SetCustomerDescNull()
            {
                this[tableCustomerDemographics.CustomerDescColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public CustomerCustomerDemoRow[] GetCustomerCustomerDemoRows()
            {
                if ((Table.ChildRelations["FK_CustomerCustomerDemo"] == null))
                {
                    return new CustomerCustomerDemoRow[0];
                }
                else
                {
                    return
                        ((CustomerCustomerDemoRow[])
                         (base.GetChildRows(Table.ChildRelations["FK_CustomerCustomerDemo"])));
                }
            }
        }

        #endregion

        #region Nested type: CustomerDemographicsRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerDemographicsRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly CustomerDemographicsRow eventRow;

            [DebuggerNonUserCode]
            public CustomerDemographicsRowChangeEvent(CustomerDemographicsRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public CustomerDemographicsRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: CustomersDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class CustomersDataTable : TypedTableBase<CustomersRow>
        {
            private DataColumn columnAddress;

            private DataColumn columnCity;
            private DataColumn columnCompanyName;

            private DataColumn columnContactName;

            private DataColumn columnContactTitle;

            private DataColumn columnCountry;
            private DataColumn columnCustomerID;

            private DataColumn columnFax;
            private DataColumn columnPhone;
            private DataColumn columnPostalCode;
            private DataColumn columnRegion;

            [DebuggerNonUserCode]
            public CustomersDataTable()
            {
                TableName = "Customers";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal CustomersDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected CustomersDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn CustomerIDColumn
            {
                get { return columnCustomerID; }
            }

            [DebuggerNonUserCode]
            public DataColumn CompanyNameColumn
            {
                get { return columnCompanyName; }
            }

            [DebuggerNonUserCode]
            public DataColumn ContactNameColumn
            {
                get { return columnContactName; }
            }

            [DebuggerNonUserCode]
            public DataColumn ContactTitleColumn
            {
                get { return columnContactTitle; }
            }

            [DebuggerNonUserCode]
            public DataColumn AddressColumn
            {
                get { return columnAddress; }
            }

            [DebuggerNonUserCode]
            public DataColumn CityColumn
            {
                get { return columnCity; }
            }

            [DebuggerNonUserCode]
            public DataColumn RegionColumn
            {
                get { return columnRegion; }
            }

            [DebuggerNonUserCode]
            public DataColumn PostalCodeColumn
            {
                get { return columnPostalCode; }
            }

            [DebuggerNonUserCode]
            public DataColumn CountryColumn
            {
                get { return columnCountry; }
            }

            [DebuggerNonUserCode]
            public DataColumn PhoneColumn
            {
                get { return columnPhone; }
            }

            [DebuggerNonUserCode]
            public DataColumn FaxColumn
            {
                get { return columnFax; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public CustomersRow this[int index]
            {
                get { return ((CustomersRow) (Rows[index])); }
            }

            public event CustomersRowChangeEventHandler CustomersRowChanging;

            public event CustomersRowChangeEventHandler CustomersRowChanged;

            public event CustomersRowChangeEventHandler CustomersRowDeleting;

            public event CustomersRowChangeEventHandler CustomersRowDeleted;

            [DebuggerNonUserCode]
            public void AddCustomersRow(CustomersRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public CustomersRow AddCustomersRow(string CustomerID, string CompanyName, string ContactName,
                                                string ContactTitle, string Address, string City, string Region,
                                                string PostalCode, string Country, string Phone, string Fax)
            {
                var rowCustomersRow = ((CustomersRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                CustomerID,
                                                CompanyName,
                                                ContactName,
                                                ContactTitle,
                                                Address,
                                                City,
                                                Region,
                                                PostalCode,
                                                Country,
                                                Phone,
                                                Fax
                                            };
                rowCustomersRow.ItemArray = columnValuesArray;
                Rows.Add(rowCustomersRow);
                return rowCustomersRow;
            }

            [DebuggerNonUserCode]
            public CustomersRow FindByCustomerID(string CustomerID)
            {
                return ((CustomersRow) (Rows.Find(new object[]
                                                      {
                                                          CustomerID
                                                      })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((CustomersDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CustomersDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnCustomerID = base.Columns["CustomerID"];
                columnCompanyName = base.Columns["CompanyName"];
                columnContactName = base.Columns["ContactName"];
                columnContactTitle = base.Columns["ContactTitle"];
                columnAddress = base.Columns["Address"];
                columnCity = base.Columns["City"];
                columnRegion = base.Columns["Region"];
                columnPostalCode = base.Columns["PostalCode"];
                columnCountry = base.Columns["Country"];
                columnPhone = base.Columns["Phone"];
                columnFax = base.Columns["Fax"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnCustomerID = new DataColumn("CustomerID", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCustomerID);
                columnCompanyName = new DataColumn("CompanyName", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCompanyName);
                columnContactName = new DataColumn("ContactName", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnContactName);
                columnContactTitle = new DataColumn("ContactTitle", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnContactTitle);
                columnAddress = new DataColumn("Address", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnAddress);
                columnCity = new DataColumn("City", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCity);
                columnRegion = new DataColumn("Region", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnRegion);
                columnPostalCode = new DataColumn("PostalCode", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnPostalCode);
                columnCountry = new DataColumn("Country", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCountry);
                columnPhone = new DataColumn("Phone", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnPhone);
                columnFax = new DataColumn("Fax", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnFax);
                Constraints.Add(new UniqueConstraint("Constraint1", new[]
                                                                        {
                                                                            columnCustomerID
                                                                        }, true));
                columnCustomerID.AllowDBNull = false;
                columnCustomerID.Unique = true;
                columnCustomerID.MaxLength = 5;
                columnCompanyName.AllowDBNull = false;
                columnCompanyName.MaxLength = 40;
                columnContactName.MaxLength = 30;
                columnContactTitle.MaxLength = 30;
                columnAddress.MaxLength = 60;
                columnCity.MaxLength = 15;
                columnRegion.MaxLength = 15;
                columnPostalCode.MaxLength = 10;
                columnCountry.MaxLength = 15;
                columnPhone.MaxLength = 24;
                columnFax.MaxLength = 24;
            }

            [DebuggerNonUserCode]
            public CustomersRow NewCustomersRow()
            {
                return ((CustomersRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CustomersRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof (CustomersRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((CustomersRowChanged != null))
                {
                    CustomersRowChanged(this, new CustomersRowChangeEvent(((CustomersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((CustomersRowChanging != null))
                {
                    CustomersRowChanging(this, new CustomersRowChangeEvent(((CustomersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((CustomersRowDeleted != null))
                {
                    CustomersRowDeleted(this, new CustomersRowChangeEvent(((CustomersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((CustomersRowDeleting != null))
                {
                    CustomersRowDeleting(this, new CustomersRowChangeEvent(((CustomersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveCustomersRow(CustomersRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new NorthwindDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                             schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: CustomersRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomersRow : DataRow
        {
            private readonly CustomersDataTable tableCustomers;

            [DebuggerNonUserCode]
            internal CustomersRow(DataRowBuilder rb) :
                base(rb)
            {
                tableCustomers = ((CustomersDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public string CustomerID
            {
                get { return ((string) (this[tableCustomers.CustomerIDColumn])); }
                set { this[tableCustomers.CustomerIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string CompanyName
            {
                get { return ((string) (this[tableCustomers.CompanyNameColumn])); }
                set { this[tableCustomers.CompanyNameColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string ContactName
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableCustomers.ContactNameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ContactName\' in table \'Customers\' is DBNull.", e);
                    }
                }
                set { this[tableCustomers.ContactNameColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string ContactTitle
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableCustomers.ContactTitleColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ContactTitle\' in table \'Customers\' is DBNull.", e);
                    }
                }
                set { this[tableCustomers.ContactTitleColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Address
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableCustomers.AddressColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Address\' in table \'Customers\' is DBNull.", e);
                    }
                }
                set { this[tableCustomers.AddressColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string City
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableCustomers.CityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'City\' in table \'Customers\' is DBNull.", e);
                    }
                }
                set { this[tableCustomers.CityColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Region
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableCustomers.RegionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Region\' in table \'Customers\' is DBNull.", e);
                    }
                }
                set { this[tableCustomers.RegionColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string PostalCode
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableCustomers.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'PostalCode\' in table \'Customers\' is DBNull.", e);
                    }
                }
                set { this[tableCustomers.PostalCodeColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Country
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableCustomers.CountryColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Country\' in table \'Customers\' is DBNull.", e);
                    }
                }
                set { this[tableCustomers.CountryColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Phone
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableCustomers.PhoneColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Phone\' in table \'Customers\' is DBNull.", e);
                    }
                }
                set { this[tableCustomers.PhoneColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Fax
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableCustomers.FaxColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Fax\' in table \'Customers\' is DBNull.", e);
                    }
                }
                set { this[tableCustomers.FaxColumn] = value; }
            }

            [DebuggerNonUserCode]
            public bool IsContactNameNull()
            {
                return IsNull(tableCustomers.ContactNameColumn);
            }

            [DebuggerNonUserCode]
            public void SetContactNameNull()
            {
                this[tableCustomers.ContactNameColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsContactTitleNull()
            {
                return IsNull(tableCustomers.ContactTitleColumn);
            }

            [DebuggerNonUserCode]
            public void SetContactTitleNull()
            {
                this[tableCustomers.ContactTitleColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsAddressNull()
            {
                return IsNull(tableCustomers.AddressColumn);
            }

            [DebuggerNonUserCode]
            public void SetAddressNull()
            {
                this[tableCustomers.AddressColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsCityNull()
            {
                return IsNull(tableCustomers.CityColumn);
            }

            [DebuggerNonUserCode]
            public void SetCityNull()
            {
                this[tableCustomers.CityColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsRegionNull()
            {
                return IsNull(tableCustomers.RegionColumn);
            }

            [DebuggerNonUserCode]
            public void SetRegionNull()
            {
                this[tableCustomers.RegionColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsPostalCodeNull()
            {
                return IsNull(tableCustomers.PostalCodeColumn);
            }

            [DebuggerNonUserCode]
            public void SetPostalCodeNull()
            {
                this[tableCustomers.PostalCodeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsCountryNull()
            {
                return IsNull(tableCustomers.CountryColumn);
            }

            [DebuggerNonUserCode]
            public void SetCountryNull()
            {
                this[tableCustomers.CountryColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsPhoneNull()
            {
                return IsNull(tableCustomers.PhoneColumn);
            }

            [DebuggerNonUserCode]
            public void SetPhoneNull()
            {
                this[tableCustomers.PhoneColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsFaxNull()
            {
                return IsNull(tableCustomers.FaxColumn);
            }

            [DebuggerNonUserCode]
            public void SetFaxNull()
            {
                this[tableCustomers.FaxColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public CustomerCustomerDemoRow[] GetCustomerCustomerDemoRows()
            {
                if ((Table.ChildRelations["FK_CustomerCustomerDemo_Customers"] == null))
                {
                    return new CustomerCustomerDemoRow[0];
                }
                else
                {
                    return
                        ((CustomerCustomerDemoRow[])
                         (base.GetChildRows(Table.ChildRelations["FK_CustomerCustomerDemo_Customers"])));
                }
            }

            [DebuggerNonUserCode]
            public OrdersRow[] GetOrdersRows()
            {
                if ((Table.ChildRelations["FK_Orders_Customers"] == null))
                {
                    return new OrdersRow[0];
                }
                else
                {
                    return ((OrdersRow[]) (base.GetChildRows(Table.ChildRelations["FK_Orders_Customers"])));
                }
            }
        }

        #endregion

        #region Nested type: CustomersRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomersRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly CustomersRow eventRow;

            [DebuggerNonUserCode]
            public CustomersRowChangeEvent(CustomersRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public CustomersRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: EmployeesDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class EmployeesDataTable : TypedTableBase<EmployeesRow>
        {
            private DataColumn columnAddress;
            private DataColumn columnBirthDate;

            private DataColumn columnCity;

            private DataColumn columnCountry;
            private DataColumn columnEmployeeID;

            private DataColumn columnExtension;
            private DataColumn columnFirstName;
            private DataColumn columnHireDate;
            private DataColumn columnHomePhone;
            private DataColumn columnLastName;

            private DataColumn columnNotes;
            private DataColumn columnPhoto;

            private DataColumn columnPhotoPath;
            private DataColumn columnPostalCode;
            private DataColumn columnRegion;
            private DataColumn columnReportsTo;
            private DataColumn columnTitle;

            private DataColumn columnTitleOfCourtesy;

            [DebuggerNonUserCode]
            public EmployeesDataTable()
            {
                TableName = "Employees";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal EmployeesDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected EmployeesDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn EmployeeIDColumn
            {
                get { return columnEmployeeID; }
            }

            [DebuggerNonUserCode]
            public DataColumn LastNameColumn
            {
                get { return columnLastName; }
            }

            [DebuggerNonUserCode]
            public DataColumn FirstNameColumn
            {
                get { return columnFirstName; }
            }

            [DebuggerNonUserCode]
            public DataColumn TitleColumn
            {
                get { return columnTitle; }
            }

            [DebuggerNonUserCode]
            public DataColumn TitleOfCourtesyColumn
            {
                get { return columnTitleOfCourtesy; }
            }

            [DebuggerNonUserCode]
            public DataColumn BirthDateColumn
            {
                get { return columnBirthDate; }
            }

            [DebuggerNonUserCode]
            public DataColumn HireDateColumn
            {
                get { return columnHireDate; }
            }

            [DebuggerNonUserCode]
            public DataColumn AddressColumn
            {
                get { return columnAddress; }
            }

            [DebuggerNonUserCode]
            public DataColumn CityColumn
            {
                get { return columnCity; }
            }

            [DebuggerNonUserCode]
            public DataColumn RegionColumn
            {
                get { return columnRegion; }
            }

            [DebuggerNonUserCode]
            public DataColumn PostalCodeColumn
            {
                get { return columnPostalCode; }
            }

            [DebuggerNonUserCode]
            public DataColumn CountryColumn
            {
                get { return columnCountry; }
            }

            [DebuggerNonUserCode]
            public DataColumn HomePhoneColumn
            {
                get { return columnHomePhone; }
            }

            [DebuggerNonUserCode]
            public DataColumn ExtensionColumn
            {
                get { return columnExtension; }
            }

            [DebuggerNonUserCode]
            public DataColumn PhotoColumn
            {
                get { return columnPhoto; }
            }

            [DebuggerNonUserCode]
            public DataColumn NotesColumn
            {
                get { return columnNotes; }
            }

            [DebuggerNonUserCode]
            public DataColumn ReportsToColumn
            {
                get { return columnReportsTo; }
            }

            [DebuggerNonUserCode]
            public DataColumn PhotoPathColumn
            {
                get { return columnPhotoPath; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public EmployeesRow this[int index]
            {
                get { return ((EmployeesRow) (Rows[index])); }
            }

            public event EmployeesRowChangeEventHandler EmployeesRowChanging;

            public event EmployeesRowChangeEventHandler EmployeesRowChanged;

            public event EmployeesRowChangeEventHandler EmployeesRowDeleting;

            public event EmployeesRowChangeEventHandler EmployeesRowDeleted;

            [DebuggerNonUserCode]
            public void AddEmployeesRow(EmployeesRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public EmployeesRow AddEmployeesRow(
                string LastName,
                string FirstName,
                string Title,
                string TitleOfCourtesy,
                DateTime BirthDate,
                DateTime HireDate,
                string Address,
                string City,
                string Region,
                string PostalCode,
                string Country,
                string HomePhone,
                string Extension,
                byte[] Photo,
                string Notes,
                EmployeesRow parentEmployeesRowByFK_Employees_Employees,
                string PhotoPath)
            {
                var rowEmployeesRow = ((EmployeesRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                null,
                                                LastName,
                                                FirstName,
                                                Title,
                                                TitleOfCourtesy,
                                                BirthDate,
                                                HireDate,
                                                Address,
                                                City,
                                                Region,
                                                PostalCode,
                                                Country,
                                                HomePhone,
                                                Extension,
                                                Photo,
                                                Notes,
                                                null,
                                                PhotoPath
                                            };
                if ((parentEmployeesRowByFK_Employees_Employees != null))
                {
                    columnValuesArray[16] = parentEmployeesRowByFK_Employees_Employees[0];
                }
                rowEmployeesRow.ItemArray = columnValuesArray;
                Rows.Add(rowEmployeesRow);
                return rowEmployeesRow;
            }

            [DebuggerNonUserCode]
            public EmployeesRow FindByEmployeeID(int EmployeeID)
            {
                return ((EmployeesRow) (Rows.Find(new object[]
                                                      {
                                                          EmployeeID
                                                      })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((EmployeesDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new EmployeesDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnEmployeeID = base.Columns["EmployeeID"];
                columnLastName = base.Columns["LastName"];
                columnFirstName = base.Columns["FirstName"];
                columnTitle = base.Columns["Title"];
                columnTitleOfCourtesy = base.Columns["TitleOfCourtesy"];
                columnBirthDate = base.Columns["BirthDate"];
                columnHireDate = base.Columns["HireDate"];
                columnAddress = base.Columns["Address"];
                columnCity = base.Columns["City"];
                columnRegion = base.Columns["Region"];
                columnPostalCode = base.Columns["PostalCode"];
                columnCountry = base.Columns["Country"];
                columnHomePhone = base.Columns["HomePhone"];
                columnExtension = base.Columns["Extension"];
                columnPhoto = base.Columns["Photo"];
                columnNotes = base.Columns["Notes"];
                columnReportsTo = base.Columns["ReportsTo"];
                columnPhotoPath = base.Columns["PhotoPath"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnEmployeeID = new DataColumn("EmployeeID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnEmployeeID);
                columnLastName = new DataColumn("LastName", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnLastName);
                columnFirstName = new DataColumn("FirstName", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnFirstName);
                columnTitle = new DataColumn("Title", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnTitle);
                columnTitleOfCourtesy = new DataColumn("TitleOfCourtesy", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnTitleOfCourtesy);
                columnBirthDate = new DataColumn("BirthDate", typeof (DateTime), null, MappingType.Element);
                base.Columns.Add(columnBirthDate);
                columnHireDate = new DataColumn("HireDate", typeof (DateTime), null, MappingType.Element);
                base.Columns.Add(columnHireDate);
                columnAddress = new DataColumn("Address", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnAddress);
                columnCity = new DataColumn("City", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCity);
                columnRegion = new DataColumn("Region", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnRegion);
                columnPostalCode = new DataColumn("PostalCode", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnPostalCode);
                columnCountry = new DataColumn("Country", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCountry);
                columnHomePhone = new DataColumn("HomePhone", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnHomePhone);
                columnExtension = new DataColumn("Extension", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnExtension);
                columnPhoto = new DataColumn("Photo", typeof (byte[]), null, MappingType.Element);
                base.Columns.Add(columnPhoto);
                columnNotes = new DataColumn("Notes", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnNotes);
                columnReportsTo = new DataColumn("ReportsTo", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnReportsTo);
                columnPhotoPath = new DataColumn("PhotoPath", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnPhotoPath);
                Constraints.Add(new UniqueConstraint("Constraint1", new[]
                                                                        {
                                                                            columnEmployeeID
                                                                        }, true));
                columnEmployeeID.AutoIncrement = true;
                columnEmployeeID.AutoIncrementSeed = -1;
                columnEmployeeID.AutoIncrementStep = -1;
                columnEmployeeID.AllowDBNull = false;
                columnEmployeeID.ReadOnly = true;
                columnEmployeeID.Unique = true;
                columnLastName.AllowDBNull = false;
                columnLastName.MaxLength = 20;
                columnFirstName.AllowDBNull = false;
                columnFirstName.MaxLength = 10;
                columnTitle.MaxLength = 30;
                columnTitleOfCourtesy.MaxLength = 25;
                columnAddress.MaxLength = 60;
                columnCity.MaxLength = 15;
                columnRegion.MaxLength = 15;
                columnPostalCode.MaxLength = 10;
                columnCountry.MaxLength = 15;
                columnHomePhone.MaxLength = 24;
                columnExtension.MaxLength = 4;
                columnNotes.MaxLength = 1073741823;
                columnPhotoPath.MaxLength = 255;
            }

            [DebuggerNonUserCode]
            public EmployeesRow NewEmployeesRow()
            {
                return ((EmployeesRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new EmployeesRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof (EmployeesRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((EmployeesRowChanged != null))
                {
                    EmployeesRowChanged(this, new EmployeesRowChangeEvent(((EmployeesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((EmployeesRowChanging != null))
                {
                    EmployeesRowChanging(this, new EmployeesRowChangeEvent(((EmployeesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((EmployeesRowDeleted != null))
                {
                    EmployeesRowDeleted(this, new EmployeesRowChangeEvent(((EmployeesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((EmployeesRowDeleting != null))
                {
                    EmployeesRowDeleting(this, new EmployeesRowChangeEvent(((EmployeesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveEmployeesRow(EmployeesRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new NorthwindDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                             schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: EmployeesRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeesRow : DataRow
        {
            private readonly EmployeesDataTable tableEmployees;

            [DebuggerNonUserCode]
            internal EmployeesRow(DataRowBuilder rb) :
                base(rb)
            {
                tableEmployees = ((EmployeesDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public int EmployeeID
            {
                get { return ((int) (this[tableEmployees.EmployeeIDColumn])); }
                set { this[tableEmployees.EmployeeIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string LastName
            {
                get { return ((string) (this[tableEmployees.LastNameColumn])); }
                set { this[tableEmployees.LastNameColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string FirstName
            {
                get { return ((string) (this[tableEmployees.FirstNameColumn])); }
                set { this[tableEmployees.FirstNameColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Title
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableEmployees.TitleColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Title\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.TitleColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string TitleOfCourtesy
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableEmployees.TitleOfCourtesyColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'TitleOfCourtesy\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.TitleOfCourtesyColumn] = value; }
            }

            [DebuggerNonUserCode]
            public DateTime BirthDate
            {
                get
                {
                    try
                    {
                        return ((DateTime) (this[tableEmployees.BirthDateColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'BirthDate\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.BirthDateColumn] = value; }
            }

            [DebuggerNonUserCode]
            public DateTime HireDate
            {
                get
                {
                    try
                    {
                        return ((DateTime) (this[tableEmployees.HireDateColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'HireDate\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.HireDateColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Address
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableEmployees.AddressColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Address\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.AddressColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string City
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableEmployees.CityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'City\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.CityColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Region
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableEmployees.RegionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Region\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.RegionColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string PostalCode
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableEmployees.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'PostalCode\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.PostalCodeColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Country
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableEmployees.CountryColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Country\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.CountryColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string HomePhone
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableEmployees.HomePhoneColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'HomePhone\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.HomePhoneColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Extension
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableEmployees.ExtensionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Extension\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.ExtensionColumn] = value; }
            }

            [DebuggerNonUserCode]
            public byte[] Photo
            {
                get
                {
                    try
                    {
                        return ((byte[]) (this[tableEmployees.PhotoColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Photo\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.PhotoColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableEmployees.NotesColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Notes\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.NotesColumn] = value; }
            }

            [DebuggerNonUserCode]
            public int ReportsTo
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableEmployees.ReportsToColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ReportsTo\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.ReportsToColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string PhotoPath
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableEmployees.PhotoPathColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'PhotoPath\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set { this[tableEmployees.PhotoPathColumn] = value; }
            }

            [DebuggerNonUserCode]
            public EmployeesRow EmployeesRowParent
            {
                get { return ((EmployeesRow) (GetParentRow(Table.ParentRelations["FK_Employees_Employees"]))); }
                set { SetParentRow(value, Table.ParentRelations["FK_Employees_Employees"]); }
            }

            [DebuggerNonUserCode]
            public bool IsTitleNull()
            {
                return IsNull(tableEmployees.TitleColumn);
            }

            [DebuggerNonUserCode]
            public void SetTitleNull()
            {
                this[tableEmployees.TitleColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsTitleOfCourtesyNull()
            {
                return IsNull(tableEmployees.TitleOfCourtesyColumn);
            }

            [DebuggerNonUserCode]
            public void SetTitleOfCourtesyNull()
            {
                this[tableEmployees.TitleOfCourtesyColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsBirthDateNull()
            {
                return IsNull(tableEmployees.BirthDateColumn);
            }

            [DebuggerNonUserCode]
            public void SetBirthDateNull()
            {
                this[tableEmployees.BirthDateColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsHireDateNull()
            {
                return IsNull(tableEmployees.HireDateColumn);
            }

            [DebuggerNonUserCode]
            public void SetHireDateNull()
            {
                this[tableEmployees.HireDateColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsAddressNull()
            {
                return IsNull(tableEmployees.AddressColumn);
            }

            [DebuggerNonUserCode]
            public void SetAddressNull()
            {
                this[tableEmployees.AddressColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsCityNull()
            {
                return IsNull(tableEmployees.CityColumn);
            }

            [DebuggerNonUserCode]
            public void SetCityNull()
            {
                this[tableEmployees.CityColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsRegionNull()
            {
                return IsNull(tableEmployees.RegionColumn);
            }

            [DebuggerNonUserCode]
            public void SetRegionNull()
            {
                this[tableEmployees.RegionColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsPostalCodeNull()
            {
                return IsNull(tableEmployees.PostalCodeColumn);
            }

            [DebuggerNonUserCode]
            public void SetPostalCodeNull()
            {
                this[tableEmployees.PostalCodeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsCountryNull()
            {
                return IsNull(tableEmployees.CountryColumn);
            }

            [DebuggerNonUserCode]
            public void SetCountryNull()
            {
                this[tableEmployees.CountryColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsHomePhoneNull()
            {
                return IsNull(tableEmployees.HomePhoneColumn);
            }

            [DebuggerNonUserCode]
            public void SetHomePhoneNull()
            {
                this[tableEmployees.HomePhoneColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsExtensionNull()
            {
                return IsNull(tableEmployees.ExtensionColumn);
            }

            [DebuggerNonUserCode]
            public void SetExtensionNull()
            {
                this[tableEmployees.ExtensionColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsPhotoNull()
            {
                return IsNull(tableEmployees.PhotoColumn);
            }

            [DebuggerNonUserCode]
            public void SetPhotoNull()
            {
                this[tableEmployees.PhotoColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsNotesNull()
            {
                return IsNull(tableEmployees.NotesColumn);
            }

            [DebuggerNonUserCode]
            public void SetNotesNull()
            {
                this[tableEmployees.NotesColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsReportsToNull()
            {
                return IsNull(tableEmployees.ReportsToColumn);
            }

            [DebuggerNonUserCode]
            public void SetReportsToNull()
            {
                this[tableEmployees.ReportsToColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsPhotoPathNull()
            {
                return IsNull(tableEmployees.PhotoPathColumn);
            }

            [DebuggerNonUserCode]
            public void SetPhotoPathNull()
            {
                this[tableEmployees.PhotoPathColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public EmployeesRow[] GetEmployeesRows()
            {
                if ((Table.ChildRelations["FK_Employees_Employees"] == null))
                {
                    return new EmployeesRow[0];
                }
                else
                {
                    return ((EmployeesRow[]) (base.GetChildRows(Table.ChildRelations["FK_Employees_Employees"])));
                }
            }

            [DebuggerNonUserCode]
            public EmployeeTerritoriesRow[] GetEmployeeTerritoriesRows()
            {
                if ((Table.ChildRelations["FK_EmployeeTerritories_Employees"] == null))
                {
                    return new EmployeeTerritoriesRow[0];
                }
                else
                {
                    return
                        ((EmployeeTerritoriesRow[])
                         (base.GetChildRows(Table.ChildRelations["FK_EmployeeTerritories_Employees"])));
                }
            }

            [DebuggerNonUserCode]
            public OrdersRow[] GetOrdersRows()
            {
                if ((Table.ChildRelations["FK_Orders_Employees"] == null))
                {
                    return new OrdersRow[0];
                }
                else
                {
                    return ((OrdersRow[]) (base.GetChildRows(Table.ChildRelations["FK_Orders_Employees"])));
                }
            }
        }

        #endregion

        #region Nested type: EmployeesRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeesRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly EmployeesRow eventRow;

            [DebuggerNonUserCode]
            public EmployeesRowChangeEvent(EmployeesRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public EmployeesRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: EmployeeTerritoriesDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class EmployeeTerritoriesDataTable : TypedTableBase<EmployeeTerritoriesRow>
        {
            private DataColumn columnEmployeeID;

            private DataColumn columnTerritoryID;

            [DebuggerNonUserCode]
            public EmployeeTerritoriesDataTable()
            {
                TableName = "EmployeeTerritories";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal EmployeeTerritoriesDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected EmployeeTerritoriesDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn EmployeeIDColumn
            {
                get { return columnEmployeeID; }
            }

            [DebuggerNonUserCode]
            public DataColumn TerritoryIDColumn
            {
                get { return columnTerritoryID; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public EmployeeTerritoriesRow this[int index]
            {
                get { return ((EmployeeTerritoriesRow) (Rows[index])); }
            }

            public event EmployeeTerritoriesRowChangeEventHandler EmployeeTerritoriesRowChanging;

            public event EmployeeTerritoriesRowChangeEventHandler EmployeeTerritoriesRowChanged;

            public event EmployeeTerritoriesRowChangeEventHandler EmployeeTerritoriesRowDeleting;

            public event EmployeeTerritoriesRowChangeEventHandler EmployeeTerritoriesRowDeleted;

            [DebuggerNonUserCode]
            public void AddEmployeeTerritoriesRow(EmployeeTerritoriesRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public EmployeeTerritoriesRow AddEmployeeTerritoriesRow(
                EmployeesRow parentEmployeesRowByFK_EmployeeTerritories_Employees,
                TerritoriesRow parentTerritoriesRowByFK_EmployeeTerritories_Territories)
            {
                var rowEmployeeTerritoriesRow = ((EmployeeTerritoriesRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                null,
                                                null
                                            };
                if ((parentEmployeesRowByFK_EmployeeTerritories_Employees != null))
                {
                    columnValuesArray[0] = parentEmployeesRowByFK_EmployeeTerritories_Employees[0];
                }
                if ((parentTerritoriesRowByFK_EmployeeTerritories_Territories != null))
                {
                    columnValuesArray[1] = parentTerritoriesRowByFK_EmployeeTerritories_Territories[0];
                }
                rowEmployeeTerritoriesRow.ItemArray = columnValuesArray;
                Rows.Add(rowEmployeeTerritoriesRow);
                return rowEmployeeTerritoriesRow;
            }

            [DebuggerNonUserCode]
            public EmployeeTerritoriesRow FindByEmployeeIDTerritoryID(int EmployeeID, string TerritoryID)
            {
                return ((EmployeeTerritoriesRow) (Rows.Find(new object[]
                                                                {
                                                                    EmployeeID,
                                                                    TerritoryID
                                                                })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((EmployeeTerritoriesDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new EmployeeTerritoriesDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnEmployeeID = base.Columns["EmployeeID"];
                columnTerritoryID = base.Columns["TerritoryID"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnEmployeeID = new DataColumn("EmployeeID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnEmployeeID);
                columnTerritoryID = new DataColumn("TerritoryID", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnTerritoryID);
                Constraints.Add(new UniqueConstraint("Constraint1", new[]
                                                                        {
                                                                            columnEmployeeID,
                                                                            columnTerritoryID
                                                                        }, true));
                columnEmployeeID.AllowDBNull = false;
                columnTerritoryID.AllowDBNull = false;
                columnTerritoryID.MaxLength = 20;
            }

            [DebuggerNonUserCode]
            public EmployeeTerritoriesRow NewEmployeeTerritoriesRow()
            {
                return ((EmployeeTerritoriesRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new EmployeeTerritoriesRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof (EmployeeTerritoriesRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((EmployeeTerritoriesRowChanged != null))
                {
                    EmployeeTerritoriesRowChanged(this,
                                                  new EmployeeTerritoriesRowChangeEvent(
                                                      ((EmployeeTerritoriesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((EmployeeTerritoriesRowChanging != null))
                {
                    EmployeeTerritoriesRowChanging(this,
                                                   new EmployeeTerritoriesRowChangeEvent(
                                                       ((EmployeeTerritoriesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((EmployeeTerritoriesRowDeleted != null))
                {
                    EmployeeTerritoriesRowDeleted(this,
                                                  new EmployeeTerritoriesRowChangeEvent(
                                                      ((EmployeeTerritoriesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((EmployeeTerritoriesRowDeleting != null))
                {
                    EmployeeTerritoriesRowDeleting(this,
                                                   new EmployeeTerritoriesRowChangeEvent(
                                                       ((EmployeeTerritoriesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveEmployeeTerritoriesRow(EmployeeTerritoriesRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new NorthwindDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeTerritoriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                             schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: EmployeeTerritoriesRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeTerritoriesRow : DataRow
        {
            private readonly EmployeeTerritoriesDataTable tableEmployeeTerritories;

            [DebuggerNonUserCode]
            internal EmployeeTerritoriesRow(DataRowBuilder rb) :
                base(rb)
            {
                tableEmployeeTerritories = ((EmployeeTerritoriesDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public int EmployeeID
            {
                get { return ((int) (this[tableEmployeeTerritories.EmployeeIDColumn])); }
                set { this[tableEmployeeTerritories.EmployeeIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string TerritoryID
            {
                get { return ((string) (this[tableEmployeeTerritories.TerritoryIDColumn])); }
                set { this[tableEmployeeTerritories.TerritoryIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public EmployeesRow EmployeesRow
            {
                get { return ((EmployeesRow) (GetParentRow(Table.ParentRelations["FK_EmployeeTerritories_Employees"]))); }
                set { SetParentRow(value, Table.ParentRelations["FK_EmployeeTerritories_Employees"]); }
            }

            [DebuggerNonUserCode]
            public TerritoriesRow TerritoriesRow
            {
                get { return ((TerritoriesRow) (GetParentRow(Table.ParentRelations["FK_EmployeeTerritories_Territories"]))); }
                set { SetParentRow(value, Table.ParentRelations["FK_EmployeeTerritories_Territories"]); }
            }
        }

        #endregion

        #region Nested type: EmployeeTerritoriesRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeTerritoriesRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly EmployeeTerritoriesRow eventRow;

            [DebuggerNonUserCode]
            public EmployeeTerritoriesRowChangeEvent(EmployeeTerritoriesRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public EmployeeTerritoriesRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: Order_DetailsDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class Order_DetailsDataTable : TypedTableBase<Order_DetailsRow>
        {
            private DataColumn columnDiscount;
            private DataColumn columnOrderID;

            private DataColumn columnProductID;

            private DataColumn columnQuantity;
            private DataColumn columnUnitPrice;

            [DebuggerNonUserCode]
            public Order_DetailsDataTable()
            {
                TableName = "Order Details";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal Order_DetailsDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected Order_DetailsDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn OrderIDColumn
            {
                get { return columnOrderID; }
            }

            [DebuggerNonUserCode]
            public DataColumn ProductIDColumn
            {
                get { return columnProductID; }
            }

            [DebuggerNonUserCode]
            public DataColumn UnitPriceColumn
            {
                get { return columnUnitPrice; }
            }

            [DebuggerNonUserCode]
            public DataColumn QuantityColumn
            {
                get { return columnQuantity; }
            }

            [DebuggerNonUserCode]
            public DataColumn DiscountColumn
            {
                get { return columnDiscount; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public Order_DetailsRow this[int index]
            {
                get { return ((Order_DetailsRow) (Rows[index])); }
            }

            public event Order_DetailsRowChangeEventHandler Order_DetailsRowChanging;

            public event Order_DetailsRowChangeEventHandler Order_DetailsRowChanged;

            public event Order_DetailsRowChangeEventHandler Order_DetailsRowDeleting;

            public event Order_DetailsRowChangeEventHandler Order_DetailsRowDeleted;

            [DebuggerNonUserCode]
            public void AddOrder_DetailsRow(Order_DetailsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public Order_DetailsRow AddOrder_DetailsRow(OrdersRow parentOrdersRowByFK_Order_Details_Orders,
                                                        ProductsRow parentProductsRowByFK_Order_Details_Products,
                                                        decimal UnitPrice, short Quantity, float Discount)
            {
                var rowOrder_DetailsRow = ((Order_DetailsRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                null,
                                                null,
                                                UnitPrice,
                                                Quantity,
                                                Discount
                                            };
                if ((parentOrdersRowByFK_Order_Details_Orders != null))
                {
                    columnValuesArray[0] = parentOrdersRowByFK_Order_Details_Orders[0];
                }
                if ((parentProductsRowByFK_Order_Details_Products != null))
                {
                    columnValuesArray[1] = parentProductsRowByFK_Order_Details_Products[0];
                }
                rowOrder_DetailsRow.ItemArray = columnValuesArray;
                Rows.Add(rowOrder_DetailsRow);
                return rowOrder_DetailsRow;
            }

            [DebuggerNonUserCode]
            public Order_DetailsRow FindByOrderIDProductID(int OrderID, int ProductID)
            {
                return ((Order_DetailsRow) (Rows.Find(new object[]
                                                          {
                                                              OrderID,
                                                              ProductID
                                                          })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((Order_DetailsDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new Order_DetailsDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnOrderID = base.Columns["OrderID"];
                columnProductID = base.Columns["ProductID"];
                columnUnitPrice = base.Columns["UnitPrice"];
                columnQuantity = base.Columns["Quantity"];
                columnDiscount = base.Columns["Discount"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnOrderID = new DataColumn("OrderID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnOrderID);
                columnProductID = new DataColumn("ProductID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnProductID);
                columnUnitPrice = new DataColumn("UnitPrice", typeof (decimal), null, MappingType.Element);
                base.Columns.Add(columnUnitPrice);
                columnQuantity = new DataColumn("Quantity", typeof (short), null, MappingType.Element);
                base.Columns.Add(columnQuantity);
                columnDiscount = new DataColumn("Discount", typeof (float), null, MappingType.Element);
                base.Columns.Add(columnDiscount);
                Constraints.Add(new UniqueConstraint("Constraint1", new[]
                                                                        {
                                                                            columnOrderID,
                                                                            columnProductID
                                                                        }, true));
                columnOrderID.AllowDBNull = false;
                columnProductID.AllowDBNull = false;
                columnUnitPrice.AllowDBNull = false;
                columnQuantity.AllowDBNull = false;
                columnDiscount.AllowDBNull = false;
            }

            [DebuggerNonUserCode]
            public Order_DetailsRow NewOrder_DetailsRow()
            {
                return ((Order_DetailsRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Order_DetailsRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof (Order_DetailsRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((Order_DetailsRowChanged != null))
                {
                    Order_DetailsRowChanged(this,
                                            new Order_DetailsRowChangeEvent(((Order_DetailsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((Order_DetailsRowChanging != null))
                {
                    Order_DetailsRowChanging(this,
                                             new Order_DetailsRowChangeEvent(((Order_DetailsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((Order_DetailsRowDeleted != null))
                {
                    Order_DetailsRowDeleted(this,
                                            new Order_DetailsRowChangeEvent(((Order_DetailsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((Order_DetailsRowDeleting != null))
                {
                    Order_DetailsRowDeleting(this,
                                             new Order_DetailsRowChangeEvent(((Order_DetailsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveOrder_DetailsRow(Order_DetailsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new NorthwindDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Order_DetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                             schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: Order_DetailsRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Order_DetailsRow : DataRow
        {
            private readonly Order_DetailsDataTable tableOrder_Details;

            [DebuggerNonUserCode]
            internal Order_DetailsRow(DataRowBuilder rb) :
                base(rb)
            {
                tableOrder_Details = ((Order_DetailsDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public int OrderID
            {
                get { return ((int) (this[tableOrder_Details.OrderIDColumn])); }
                set { this[tableOrder_Details.OrderIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public int ProductID
            {
                get { return ((int) (this[tableOrder_Details.ProductIDColumn])); }
                set { this[tableOrder_Details.ProductIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public decimal UnitPrice
            {
                get { return ((decimal) (this[tableOrder_Details.UnitPriceColumn])); }
                set { this[tableOrder_Details.UnitPriceColumn] = value; }
            }

            [DebuggerNonUserCode]
            public short Quantity
            {
                get { return ((short) (this[tableOrder_Details.QuantityColumn])); }
                set { this[tableOrder_Details.QuantityColumn] = value; }
            }

            [DebuggerNonUserCode]
            public float Discount
            {
                get { return ((float) (this[tableOrder_Details.DiscountColumn])); }
                set { this[tableOrder_Details.DiscountColumn] = value; }
            }

            [DebuggerNonUserCode]
            public OrdersRow OrdersRow
            {
                get { return ((OrdersRow) (GetParentRow(Table.ParentRelations["FK_Order_Details_Orders"]))); }
                set { SetParentRow(value, Table.ParentRelations["FK_Order_Details_Orders"]); }
            }

            [DebuggerNonUserCode]
            public ProductsRow ProductsRow
            {
                get { return ((ProductsRow) (GetParentRow(Table.ParentRelations["FK_Order_Details_Products"]))); }
                set { SetParentRow(value, Table.ParentRelations["FK_Order_Details_Products"]); }
            }
        }

        #endregion

        #region Nested type: Order_DetailsRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Order_DetailsRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly Order_DetailsRow eventRow;

            [DebuggerNonUserCode]
            public Order_DetailsRowChangeEvent(Order_DetailsRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public Order_DetailsRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: OrdersDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class OrdersDataTable : TypedTableBase<OrdersRow>
        {
            private DataColumn columnCustomerID;

            private DataColumn columnEmployeeID;
            private DataColumn columnFreight;

            private DataColumn columnOrderDate;
            private DataColumn columnOrderID;

            private DataColumn columnRequiredDate;

            private DataColumn columnShipAddress;

            private DataColumn columnShipCity;

            private DataColumn columnShipCountry;
            private DataColumn columnShipName;
            private DataColumn columnShippedDate;
            private DataColumn columnShipPostalCode;
            private DataColumn columnShipRegion;
            private DataColumn columnShipVia;

            [DebuggerNonUserCode]
            public OrdersDataTable()
            {
                TableName = "Orders";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal OrdersDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected OrdersDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn OrderIDColumn
            {
                get { return columnOrderID; }
            }

            [DebuggerNonUserCode]
            public DataColumn CustomerIDColumn
            {
                get { return columnCustomerID; }
            }

            [DebuggerNonUserCode]
            public DataColumn EmployeeIDColumn
            {
                get { return columnEmployeeID; }
            }

            [DebuggerNonUserCode]
            public DataColumn OrderDateColumn
            {
                get { return columnOrderDate; }
            }

            [DebuggerNonUserCode]
            public DataColumn RequiredDateColumn
            {
                get { return columnRequiredDate; }
            }

            [DebuggerNonUserCode]
            public DataColumn ShippedDateColumn
            {
                get { return columnShippedDate; }
            }

            [DebuggerNonUserCode]
            public DataColumn ShipViaColumn
            {
                get { return columnShipVia; }
            }

            [DebuggerNonUserCode]
            public DataColumn FreightColumn
            {
                get { return columnFreight; }
            }

            [DebuggerNonUserCode]
            public DataColumn ShipNameColumn
            {
                get { return columnShipName; }
            }

            [DebuggerNonUserCode]
            public DataColumn ShipAddressColumn
            {
                get { return columnShipAddress; }
            }

            [DebuggerNonUserCode]
            public DataColumn ShipCityColumn
            {
                get { return columnShipCity; }
            }

            [DebuggerNonUserCode]
            public DataColumn ShipRegionColumn
            {
                get { return columnShipRegion; }
            }

            [DebuggerNonUserCode]
            public DataColumn ShipPostalCodeColumn
            {
                get { return columnShipPostalCode; }
            }

            [DebuggerNonUserCode]
            public DataColumn ShipCountryColumn
            {
                get { return columnShipCountry; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public OrdersRow this[int index]
            {
                get { return ((OrdersRow) (Rows[index])); }
            }

            public event OrdersRowChangeEventHandler OrdersRowChanging;

            public event OrdersRowChangeEventHandler OrdersRowChanged;

            public event OrdersRowChangeEventHandler OrdersRowDeleting;

            public event OrdersRowChangeEventHandler OrdersRowDeleted;

            [DebuggerNonUserCode]
            public void AddOrdersRow(OrdersRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public OrdersRow AddOrdersRow(CustomersRow parentCustomersRowByFK_Orders_Customers,
                                          EmployeesRow parentEmployeesRowByFK_Orders_Employees, DateTime OrderDate,
                                          DateTime RequiredDate, DateTime ShippedDate,
                                          ShippersRow parentShippersRowByFK_Orders_Shippers, decimal Freight,
                                          string ShipName, string ShipAddress, string ShipCity, string ShipRegion,
                                          string ShipPostalCode, string ShipCountry)
            {
                var rowOrdersRow = ((OrdersRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                null,
                                                null,
                                                null,
                                                OrderDate,
                                                RequiredDate,
                                                ShippedDate,
                                                null,
                                                Freight,
                                                ShipName,
                                                ShipAddress,
                                                ShipCity,
                                                ShipRegion,
                                                ShipPostalCode,
                                                ShipCountry
                                            };
                if ((parentCustomersRowByFK_Orders_Customers != null))
                {
                    columnValuesArray[1] = parentCustomersRowByFK_Orders_Customers[0];
                }
                if ((parentEmployeesRowByFK_Orders_Employees != null))
                {
                    columnValuesArray[2] = parentEmployeesRowByFK_Orders_Employees[0];
                }
                if ((parentShippersRowByFK_Orders_Shippers != null))
                {
                    columnValuesArray[6] = parentShippersRowByFK_Orders_Shippers[0];
                }
                rowOrdersRow.ItemArray = columnValuesArray;
                Rows.Add(rowOrdersRow);
                return rowOrdersRow;
            }

            [DebuggerNonUserCode]
            public OrdersRow FindByOrderID(int OrderID)
            {
                return ((OrdersRow) (Rows.Find(new object[]
                                                   {
                                                       OrderID
                                                   })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((OrdersDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new OrdersDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnOrderID = base.Columns["OrderID"];
                columnCustomerID = base.Columns["CustomerID"];
                columnEmployeeID = base.Columns["EmployeeID"];
                columnOrderDate = base.Columns["OrderDate"];
                columnRequiredDate = base.Columns["RequiredDate"];
                columnShippedDate = base.Columns["ShippedDate"];
                columnShipVia = base.Columns["ShipVia"];
                columnFreight = base.Columns["Freight"];
                columnShipName = base.Columns["ShipName"];
                columnShipAddress = base.Columns["ShipAddress"];
                columnShipCity = base.Columns["ShipCity"];
                columnShipRegion = base.Columns["ShipRegion"];
                columnShipPostalCode = base.Columns["ShipPostalCode"];
                columnShipCountry = base.Columns["ShipCountry"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnOrderID = new DataColumn("OrderID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnOrderID);
                columnCustomerID = new DataColumn("CustomerID", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCustomerID);
                columnEmployeeID = new DataColumn("EmployeeID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnEmployeeID);
                columnOrderDate = new DataColumn("OrderDate", typeof (DateTime), null, MappingType.Element);
                base.Columns.Add(columnOrderDate);
                columnRequiredDate = new DataColumn("RequiredDate", typeof (DateTime), null, MappingType.Element);
                base.Columns.Add(columnRequiredDate);
                columnShippedDate = new DataColumn("ShippedDate", typeof (DateTime), null, MappingType.Element);
                base.Columns.Add(columnShippedDate);
                columnShipVia = new DataColumn("ShipVia", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnShipVia);
                columnFreight = new DataColumn("Freight", typeof (decimal), null, MappingType.Element);
                base.Columns.Add(columnFreight);
                columnShipName = new DataColumn("ShipName", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnShipName);
                columnShipAddress = new DataColumn("ShipAddress", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnShipAddress);
                columnShipCity = new DataColumn("ShipCity", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnShipCity);
                columnShipRegion = new DataColumn("ShipRegion", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnShipRegion);
                columnShipPostalCode = new DataColumn("ShipPostalCode", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnShipPostalCode);
                columnShipCountry = new DataColumn("ShipCountry", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnShipCountry);
                Constraints.Add(new UniqueConstraint("Constraint1", new[]
                                                                        {
                                                                            columnOrderID
                                                                        }, true));
                columnOrderID.AutoIncrement = true;
                columnOrderID.AutoIncrementSeed = -1;
                columnOrderID.AutoIncrementStep = -1;
                columnOrderID.AllowDBNull = false;
                columnOrderID.ReadOnly = true;
                columnOrderID.Unique = true;
                columnCustomerID.MaxLength = 5;
                columnShipName.MaxLength = 40;
                columnShipAddress.MaxLength = 60;
                columnShipCity.MaxLength = 15;
                columnShipRegion.MaxLength = 15;
                columnShipPostalCode.MaxLength = 10;
                columnShipCountry.MaxLength = 15;
            }

            [DebuggerNonUserCode]
            public OrdersRow NewOrdersRow()
            {
                return ((OrdersRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new OrdersRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof (OrdersRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((OrdersRowChanged != null))
                {
                    OrdersRowChanged(this, new OrdersRowChangeEvent(((OrdersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((OrdersRowChanging != null))
                {
                    OrdersRowChanging(this, new OrdersRowChangeEvent(((OrdersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((OrdersRowDeleted != null))
                {
                    OrdersRowDeleted(this, new OrdersRowChangeEvent(((OrdersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((OrdersRowDeleting != null))
                {
                    OrdersRowDeleting(this, new OrdersRowChangeEvent(((OrdersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveOrdersRow(OrdersRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new NorthwindDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrdersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                             schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: OrdersRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrdersRow : DataRow
        {
            private readonly OrdersDataTable tableOrders;

            [DebuggerNonUserCode]
            internal OrdersRow(DataRowBuilder rb) :
                base(rb)
            {
                tableOrders = ((OrdersDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public int OrderID
            {
                get { return ((int) (this[tableOrders.OrderIDColumn])); }
                set { this[tableOrders.OrderIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string CustomerID
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableOrders.CustomerIDColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'CustomerID\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set { this[tableOrders.CustomerIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public int EmployeeID
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableOrders.EmployeeIDColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'EmployeeID\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set { this[tableOrders.EmployeeIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public DateTime OrderDate
            {
                get
                {
                    try
                    {
                        return ((DateTime) (this[tableOrders.OrderDateColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'OrderDate\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set { this[tableOrders.OrderDateColumn] = value; }
            }

            [DebuggerNonUserCode]
            public DateTime RequiredDate
            {
                get
                {
                    try
                    {
                        return ((DateTime) (this[tableOrders.RequiredDateColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'RequiredDate\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set { this[tableOrders.RequiredDateColumn] = value; }
            }

            [DebuggerNonUserCode]
            public DateTime ShippedDate
            {
                get
                {
                    try
                    {
                        return ((DateTime) (this[tableOrders.ShippedDateColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ShippedDate\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set { this[tableOrders.ShippedDateColumn] = value; }
            }

            [DebuggerNonUserCode]
            public int ShipVia
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableOrders.ShipViaColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ShipVia\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set { this[tableOrders.ShipViaColumn] = value; }
            }

            [DebuggerNonUserCode]
            public decimal Freight
            {
                get
                {
                    try
                    {
                        return ((decimal) (this[tableOrders.FreightColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Freight\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set { this[tableOrders.FreightColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string ShipName
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableOrders.ShipNameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ShipName\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set { this[tableOrders.ShipNameColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string ShipAddress
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableOrders.ShipAddressColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ShipAddress\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set { this[tableOrders.ShipAddressColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string ShipCity
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableOrders.ShipCityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ShipCity\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set { this[tableOrders.ShipCityColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string ShipRegion
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableOrders.ShipRegionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ShipRegion\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set { this[tableOrders.ShipRegionColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string ShipPostalCode
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableOrders.ShipPostalCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ShipPostalCode\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set { this[tableOrders.ShipPostalCodeColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string ShipCountry
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableOrders.ShipCountryColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ShipCountry\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set { this[tableOrders.ShipCountryColumn] = value; }
            }

            [DebuggerNonUserCode]
            public CustomersRow CustomersRow
            {
                get { return ((CustomersRow) (GetParentRow(Table.ParentRelations["FK_Orders_Customers"]))); }
                set { SetParentRow(value, Table.ParentRelations["FK_Orders_Customers"]); }
            }

            [DebuggerNonUserCode]
            public EmployeesRow EmployeesRow
            {
                get { return ((EmployeesRow) (GetParentRow(Table.ParentRelations["FK_Orders_Employees"]))); }
                set { SetParentRow(value, Table.ParentRelations["FK_Orders_Employees"]); }
            }

            [DebuggerNonUserCode]
            public ShippersRow ShippersRow
            {
                get { return ((ShippersRow) (GetParentRow(Table.ParentRelations["FK_Orders_Shippers"]))); }
                set { SetParentRow(value, Table.ParentRelations["FK_Orders_Shippers"]); }
            }

            [DebuggerNonUserCode]
            public bool IsCustomerIDNull()
            {
                return IsNull(tableOrders.CustomerIDColumn);
            }

            [DebuggerNonUserCode]
            public void SetCustomerIDNull()
            {
                this[tableOrders.CustomerIDColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsEmployeeIDNull()
            {
                return IsNull(tableOrders.EmployeeIDColumn);
            }

            [DebuggerNonUserCode]
            public void SetEmployeeIDNull()
            {
                this[tableOrders.EmployeeIDColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsOrderDateNull()
            {
                return IsNull(tableOrders.OrderDateColumn);
            }

            [DebuggerNonUserCode]
            public void SetOrderDateNull()
            {
                this[tableOrders.OrderDateColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsRequiredDateNull()
            {
                return IsNull(tableOrders.RequiredDateColumn);
            }

            [DebuggerNonUserCode]
            public void SetRequiredDateNull()
            {
                this[tableOrders.RequiredDateColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsShippedDateNull()
            {
                return IsNull(tableOrders.ShippedDateColumn);
            }

            [DebuggerNonUserCode]
            public void SetShippedDateNull()
            {
                this[tableOrders.ShippedDateColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsShipViaNull()
            {
                return IsNull(tableOrders.ShipViaColumn);
            }

            [DebuggerNonUserCode]
            public void SetShipViaNull()
            {
                this[tableOrders.ShipViaColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsFreightNull()
            {
                return IsNull(tableOrders.FreightColumn);
            }

            [DebuggerNonUserCode]
            public void SetFreightNull()
            {
                this[tableOrders.FreightColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsShipNameNull()
            {
                return IsNull(tableOrders.ShipNameColumn);
            }

            [DebuggerNonUserCode]
            public void SetShipNameNull()
            {
                this[tableOrders.ShipNameColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsShipAddressNull()
            {
                return IsNull(tableOrders.ShipAddressColumn);
            }

            [DebuggerNonUserCode]
            public void SetShipAddressNull()
            {
                this[tableOrders.ShipAddressColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsShipCityNull()
            {
                return IsNull(tableOrders.ShipCityColumn);
            }

            [DebuggerNonUserCode]
            public void SetShipCityNull()
            {
                this[tableOrders.ShipCityColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsShipRegionNull()
            {
                return IsNull(tableOrders.ShipRegionColumn);
            }

            [DebuggerNonUserCode]
            public void SetShipRegionNull()
            {
                this[tableOrders.ShipRegionColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsShipPostalCodeNull()
            {
                return IsNull(tableOrders.ShipPostalCodeColumn);
            }

            [DebuggerNonUserCode]
            public void SetShipPostalCodeNull()
            {
                this[tableOrders.ShipPostalCodeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsShipCountryNull()
            {
                return IsNull(tableOrders.ShipCountryColumn);
            }

            [DebuggerNonUserCode]
            public void SetShipCountryNull()
            {
                this[tableOrders.ShipCountryColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public Order_DetailsRow[] GetOrder_DetailsRows()
            {
                if ((Table.ChildRelations["FK_Order_Details_Orders"] == null))
                {
                    return new Order_DetailsRow[0];
                }
                else
                {
                    return ((Order_DetailsRow[]) (base.GetChildRows(Table.ChildRelations["FK_Order_Details_Orders"])));
                }
            }
        }

        #endregion

        #region Nested type: OrdersRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrdersRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly OrdersRow eventRow;

            [DebuggerNonUserCode]
            public OrdersRowChangeEvent(OrdersRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public OrdersRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: ProductsDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class ProductsDataTable : TypedTableBase<ProductsRow>
        {
            private DataColumn columnCategoryID;
            private DataColumn columnDiscontinued;
            private DataColumn columnProductID;

            private DataColumn columnProductName;

            private DataColumn columnQuantityPerUnit;
            private DataColumn columnReorderLevel;
            private DataColumn columnSupplierID;

            private DataColumn columnUnitPrice;

            private DataColumn columnUnitsInStock;

            private DataColumn columnUnitsOnOrder;

            [DebuggerNonUserCode]
            public ProductsDataTable()
            {
                TableName = "Products";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal ProductsDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected ProductsDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn ProductIDColumn
            {
                get { return columnProductID; }
            }

            [DebuggerNonUserCode]
            public DataColumn ProductNameColumn
            {
                get { return columnProductName; }
            }

            [DebuggerNonUserCode]
            public DataColumn SupplierIDColumn
            {
                get { return columnSupplierID; }
            }

            [DebuggerNonUserCode]
            public DataColumn CategoryIDColumn
            {
                get { return columnCategoryID; }
            }

            [DebuggerNonUserCode]
            public DataColumn QuantityPerUnitColumn
            {
                get { return columnQuantityPerUnit; }
            }

            [DebuggerNonUserCode]
            public DataColumn UnitPriceColumn
            {
                get { return columnUnitPrice; }
            }

            [DebuggerNonUserCode]
            public DataColumn UnitsInStockColumn
            {
                get { return columnUnitsInStock; }
            }

            [DebuggerNonUserCode]
            public DataColumn UnitsOnOrderColumn
            {
                get { return columnUnitsOnOrder; }
            }

            [DebuggerNonUserCode]
            public DataColumn ReorderLevelColumn
            {
                get { return columnReorderLevel; }
            }

            [DebuggerNonUserCode]
            public DataColumn DiscontinuedColumn
            {
                get { return columnDiscontinued; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public ProductsRow this[int index]
            {
                get { return ((ProductsRow) (Rows[index])); }
            }

            public event ProductsRowChangeEventHandler ProductsRowChanging;

            public event ProductsRowChangeEventHandler ProductsRowChanged;

            public event ProductsRowChangeEventHandler ProductsRowDeleting;

            public event ProductsRowChangeEventHandler ProductsRowDeleted;

            [DebuggerNonUserCode]
            public void AddProductsRow(ProductsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public ProductsRow AddProductsRow(string ProductName, SuppliersRow parentSuppliersRowByFK_Products_Suppliers,
                                              CategoriesRow parentCategoriesRowByFK_Products_Categories,
                                              string QuantityPerUnit, decimal UnitPrice, short UnitsInStock,
                                              short UnitsOnOrder, short ReorderLevel, bool Discontinued)
            {
                var rowProductsRow = ((ProductsRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                null,
                                                ProductName,
                                                null,
                                                null,
                                                QuantityPerUnit,
                                                UnitPrice,
                                                UnitsInStock,
                                                UnitsOnOrder,
                                                ReorderLevel,
                                                Discontinued
                                            };
                if ((parentSuppliersRowByFK_Products_Suppliers != null))
                {
                    columnValuesArray[2] = parentSuppliersRowByFK_Products_Suppliers[0];
                }
                if ((parentCategoriesRowByFK_Products_Categories != null))
                {
                    columnValuesArray[3] = parentCategoriesRowByFK_Products_Categories[0];
                }
                rowProductsRow.ItemArray = columnValuesArray;
                Rows.Add(rowProductsRow);
                return rowProductsRow;
            }

            [DebuggerNonUserCode]
            public ProductsRow FindByProductID(int ProductID)
            {
                return ((ProductsRow) (Rows.Find(new object[]
                                                     {
                                                         ProductID
                                                     })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((ProductsDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new ProductsDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnProductID = base.Columns["ProductID"];
                columnProductName = base.Columns["ProductName"];
                columnSupplierID = base.Columns["SupplierID"];
                columnCategoryID = base.Columns["CategoryID"];
                columnQuantityPerUnit = base.Columns["QuantityPerUnit"];
                columnUnitPrice = base.Columns["UnitPrice"];
                columnUnitsInStock = base.Columns["UnitsInStock"];
                columnUnitsOnOrder = base.Columns["UnitsOnOrder"];
                columnReorderLevel = base.Columns["ReorderLevel"];
                columnDiscontinued = base.Columns["Discontinued"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnProductID = new DataColumn("ProductID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnProductID);
                columnProductName = new DataColumn("ProductName", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnProductName);
                columnSupplierID = new DataColumn("SupplierID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnSupplierID);
                columnCategoryID = new DataColumn("CategoryID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnCategoryID);
                columnQuantityPerUnit = new DataColumn("QuantityPerUnit", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnQuantityPerUnit);
                columnUnitPrice = new DataColumn("UnitPrice", typeof (decimal), null, MappingType.Element);
                base.Columns.Add(columnUnitPrice);
                columnUnitsInStock = new DataColumn("UnitsInStock", typeof (short), null, MappingType.Element);
                base.Columns.Add(columnUnitsInStock);
                columnUnitsOnOrder = new DataColumn("UnitsOnOrder", typeof (short), null, MappingType.Element);
                base.Columns.Add(columnUnitsOnOrder);
                columnReorderLevel = new DataColumn("ReorderLevel", typeof (short), null, MappingType.Element);
                base.Columns.Add(columnReorderLevel);
                columnDiscontinued = new DataColumn("Discontinued", typeof (bool), null, MappingType.Element);
                base.Columns.Add(columnDiscontinued);
                Constraints.Add(new UniqueConstraint("Constraint1", new[]
                                                                        {
                                                                            columnProductID
                                                                        }, true));
                columnProductID.AutoIncrement = true;
                columnProductID.AutoIncrementSeed = -1;
                columnProductID.AutoIncrementStep = -1;
                columnProductID.AllowDBNull = false;
                columnProductID.ReadOnly = true;
                columnProductID.Unique = true;
                columnProductName.AllowDBNull = false;
                columnProductName.MaxLength = 40;
                columnQuantityPerUnit.MaxLength = 20;
                columnDiscontinued.AllowDBNull = false;
            }

            [DebuggerNonUserCode]
            public ProductsRow NewProductsRow()
            {
                return ((ProductsRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ProductsRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof (ProductsRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((ProductsRowChanged != null))
                {
                    ProductsRowChanged(this, new ProductsRowChangeEvent(((ProductsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((ProductsRowChanging != null))
                {
                    ProductsRowChanging(this, new ProductsRowChangeEvent(((ProductsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((ProductsRowDeleted != null))
                {
                    ProductsRowDeleted(this, new ProductsRowChangeEvent(((ProductsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((ProductsRowDeleting != null))
                {
                    ProductsRowDeleting(this, new ProductsRowChangeEvent(((ProductsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveProductsRow(ProductsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new NorthwindDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                             schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: ProductsRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductsRow : DataRow
        {
            private readonly ProductsDataTable tableProducts;

            [DebuggerNonUserCode]
            internal ProductsRow(DataRowBuilder rb) :
                base(rb)
            {
                tableProducts = ((ProductsDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public int ProductID
            {
                get { return ((int) (this[tableProducts.ProductIDColumn])); }
                set { this[tableProducts.ProductIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string ProductName
            {
                get { return ((string) (this[tableProducts.ProductNameColumn])); }
                set { this[tableProducts.ProductNameColumn] = value; }
            }

            [DebuggerNonUserCode]
            public int SupplierID
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableProducts.SupplierIDColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'SupplierID\' in table \'Products\' is DBNull.", e);
                    }
                }
                set { this[tableProducts.SupplierIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public int CategoryID
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableProducts.CategoryIDColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'CategoryID\' in table \'Products\' is DBNull.", e);
                    }
                }
                set { this[tableProducts.CategoryIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string QuantityPerUnit
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableProducts.QuantityPerUnitColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'QuantityPerUnit\' in table \'Products\' is DBNull.", e);
                    }
                }
                set { this[tableProducts.QuantityPerUnitColumn] = value; }
            }

            [DebuggerNonUserCode]
            public decimal UnitPrice
            {
                get
                {
                    try
                    {
                        return ((decimal) (this[tableProducts.UnitPriceColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'UnitPrice\' in table \'Products\' is DBNull.", e);
                    }
                }
                set { this[tableProducts.UnitPriceColumn] = value; }
            }

            [DebuggerNonUserCode]
            public short UnitsInStock
            {
                get
                {
                    try
                    {
                        return ((short) (this[tableProducts.UnitsInStockColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'UnitsInStock\' in table \'Products\' is DBNull.", e);
                    }
                }
                set { this[tableProducts.UnitsInStockColumn] = value; }
            }

            [DebuggerNonUserCode]
            public short UnitsOnOrder
            {
                get
                {
                    try
                    {
                        return ((short) (this[tableProducts.UnitsOnOrderColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'UnitsOnOrder\' in table \'Products\' is DBNull.", e);
                    }
                }
                set { this[tableProducts.UnitsOnOrderColumn] = value; }
            }

            [DebuggerNonUserCode]
            public short ReorderLevel
            {
                get
                {
                    try
                    {
                        return ((short) (this[tableProducts.ReorderLevelColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ReorderLevel\' in table \'Products\' is DBNull.", e);
                    }
                }
                set { this[tableProducts.ReorderLevelColumn] = value; }
            }

            [DebuggerNonUserCode]
            public bool Discontinued
            {
                get { return ((bool) (this[tableProducts.DiscontinuedColumn])); }
                set { this[tableProducts.DiscontinuedColumn] = value; }
            }

            [DebuggerNonUserCode]
            public CategoriesRow CategoriesRow
            {
                get { return ((CategoriesRow) (GetParentRow(Table.ParentRelations["FK_Products_Categories"]))); }
                set { SetParentRow(value, Table.ParentRelations["FK_Products_Categories"]); }
            }

            [DebuggerNonUserCode]
            public SuppliersRow SuppliersRow
            {
                get { return ((SuppliersRow) (GetParentRow(Table.ParentRelations["FK_Products_Suppliers"]))); }
                set { SetParentRow(value, Table.ParentRelations["FK_Products_Suppliers"]); }
            }

            [DebuggerNonUserCode]
            public bool IsSupplierIDNull()
            {
                return IsNull(tableProducts.SupplierIDColumn);
            }

            [DebuggerNonUserCode]
            public void SetSupplierIDNull()
            {
                this[tableProducts.SupplierIDColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsCategoryIDNull()
            {
                return IsNull(tableProducts.CategoryIDColumn);
            }

            [DebuggerNonUserCode]
            public void SetCategoryIDNull()
            {
                this[tableProducts.CategoryIDColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsQuantityPerUnitNull()
            {
                return IsNull(tableProducts.QuantityPerUnitColumn);
            }

            [DebuggerNonUserCode]
            public void SetQuantityPerUnitNull()
            {
                this[tableProducts.QuantityPerUnitColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsUnitPriceNull()
            {
                return IsNull(tableProducts.UnitPriceColumn);
            }

            [DebuggerNonUserCode]
            public void SetUnitPriceNull()
            {
                this[tableProducts.UnitPriceColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsUnitsInStockNull()
            {
                return IsNull(tableProducts.UnitsInStockColumn);
            }

            [DebuggerNonUserCode]
            public void SetUnitsInStockNull()
            {
                this[tableProducts.UnitsInStockColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsUnitsOnOrderNull()
            {
                return IsNull(tableProducts.UnitsOnOrderColumn);
            }

            [DebuggerNonUserCode]
            public void SetUnitsOnOrderNull()
            {
                this[tableProducts.UnitsOnOrderColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsReorderLevelNull()
            {
                return IsNull(tableProducts.ReorderLevelColumn);
            }

            [DebuggerNonUserCode]
            public void SetReorderLevelNull()
            {
                this[tableProducts.ReorderLevelColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public Order_DetailsRow[] GetOrder_DetailsRows()
            {
                if ((Table.ChildRelations["FK_Order_Details_Products"] == null))
                {
                    return new Order_DetailsRow[0];
                }
                else
                {
                    return ((Order_DetailsRow[]) (base.GetChildRows(Table.ChildRelations["FK_Order_Details_Products"])));
                }
            }
        }

        #endregion

        #region Nested type: ProductsRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductsRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly ProductsRow eventRow;

            [DebuggerNonUserCode]
            public ProductsRowChangeEvent(ProductsRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public ProductsRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: RegionDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class RegionDataTable : TypedTableBase<RegionRow>
        {
            private DataColumn columnRegionDescription;
            private DataColumn columnRegionID;

            [DebuggerNonUserCode]
            public RegionDataTable()
            {
                TableName = "Region";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal RegionDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected RegionDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn RegionIDColumn
            {
                get { return columnRegionID; }
            }

            [DebuggerNonUserCode]
            public DataColumn RegionDescriptionColumn
            {
                get { return columnRegionDescription; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public RegionRow this[int index]
            {
                get { return ((RegionRow) (Rows[index])); }
            }

            public event RegionRowChangeEventHandler RegionRowChanging;

            public event RegionRowChangeEventHandler RegionRowChanged;

            public event RegionRowChangeEventHandler RegionRowDeleting;

            public event RegionRowChangeEventHandler RegionRowDeleted;

            [DebuggerNonUserCode]
            public void AddRegionRow(RegionRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public RegionRow AddRegionRow(int RegionID, string RegionDescription)
            {
                var rowRegionRow = ((RegionRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                RegionID,
                                                RegionDescription
                                            };
                rowRegionRow.ItemArray = columnValuesArray;
                Rows.Add(rowRegionRow);
                return rowRegionRow;
            }

            [DebuggerNonUserCode]
            public RegionRow FindByRegionID(int RegionID)
            {
                return ((RegionRow) (Rows.Find(new object[]
                                                   {
                                                       RegionID
                                                   })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((RegionDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new RegionDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnRegionID = base.Columns["RegionID"];
                columnRegionDescription = base.Columns["RegionDescription"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnRegionID = new DataColumn("RegionID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnRegionID);
                columnRegionDescription = new DataColumn("RegionDescription", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnRegionDescription);
                Constraints.Add(new UniqueConstraint("Constraint1", new[]
                                                                        {
                                                                            columnRegionID
                                                                        }, true));
                columnRegionID.AllowDBNull = false;
                columnRegionID.Unique = true;
                columnRegionDescription.AllowDBNull = false;
                columnRegionDescription.MaxLength = 50;
            }

            [DebuggerNonUserCode]
            public RegionRow NewRegionRow()
            {
                return ((RegionRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new RegionRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof (RegionRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((RegionRowChanged != null))
                {
                    RegionRowChanged(this, new RegionRowChangeEvent(((RegionRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((RegionRowChanging != null))
                {
                    RegionRowChanging(this, new RegionRowChangeEvent(((RegionRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((RegionRowDeleted != null))
                {
                    RegionRowDeleted(this, new RegionRowChangeEvent(((RegionRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((RegionRowDeleting != null))
                {
                    RegionRowDeleting(this, new RegionRowChangeEvent(((RegionRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveRegionRow(RegionRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new NorthwindDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RegionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                             schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: RegionRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RegionRow : DataRow
        {
            private readonly RegionDataTable tableRegion;

            [DebuggerNonUserCode]
            internal RegionRow(DataRowBuilder rb) :
                base(rb)
            {
                tableRegion = ((RegionDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public int RegionID
            {
                get { return ((int) (this[tableRegion.RegionIDColumn])); }
                set { this[tableRegion.RegionIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string RegionDescription
            {
                get { return ((string) (this[tableRegion.RegionDescriptionColumn])); }
                set { this[tableRegion.RegionDescriptionColumn] = value; }
            }

            [DebuggerNonUserCode]
            public TerritoriesRow[] GetTerritoriesRows()
            {
                if ((Table.ChildRelations["FK_Territories_Region"] == null))
                {
                    return new TerritoriesRow[0];
                }
                else
                {
                    return ((TerritoriesRow[]) (base.GetChildRows(Table.ChildRelations["FK_Territories_Region"])));
                }
            }
        }

        #endregion

        #region Nested type: RegionRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RegionRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly RegionRow eventRow;

            [DebuggerNonUserCode]
            public RegionRowChangeEvent(RegionRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public RegionRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: ShippersDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class ShippersDataTable : TypedTableBase<ShippersRow>
        {
            private DataColumn columnCompanyName;

            private DataColumn columnPhone;
            private DataColumn columnShipperID;

            [DebuggerNonUserCode]
            public ShippersDataTable()
            {
                TableName = "Shippers";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal ShippersDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected ShippersDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn ShipperIDColumn
            {
                get { return columnShipperID; }
            }

            [DebuggerNonUserCode]
            public DataColumn CompanyNameColumn
            {
                get { return columnCompanyName; }
            }

            [DebuggerNonUserCode]
            public DataColumn PhoneColumn
            {
                get { return columnPhone; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public ShippersRow this[int index]
            {
                get { return ((ShippersRow) (Rows[index])); }
            }

            public event ShippersRowChangeEventHandler ShippersRowChanging;

            public event ShippersRowChangeEventHandler ShippersRowChanged;

            public event ShippersRowChangeEventHandler ShippersRowDeleting;

            public event ShippersRowChangeEventHandler ShippersRowDeleted;

            [DebuggerNonUserCode]
            public void AddShippersRow(ShippersRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public ShippersRow AddShippersRow(string CompanyName, string Phone)
            {
                var rowShippersRow = ((ShippersRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                null,
                                                CompanyName,
                                                Phone
                                            };
                rowShippersRow.ItemArray = columnValuesArray;
                Rows.Add(rowShippersRow);
                return rowShippersRow;
            }

            [DebuggerNonUserCode]
            public ShippersRow FindByShipperID(int ShipperID)
            {
                return ((ShippersRow) (Rows.Find(new object[]
                                                     {
                                                         ShipperID
                                                     })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((ShippersDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new ShippersDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnShipperID = base.Columns["ShipperID"];
                columnCompanyName = base.Columns["CompanyName"];
                columnPhone = base.Columns["Phone"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnShipperID = new DataColumn("ShipperID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnShipperID);
                columnCompanyName = new DataColumn("CompanyName", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCompanyName);
                columnPhone = new DataColumn("Phone", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnPhone);
                Constraints.Add(new UniqueConstraint("Constraint1", new[]
                                                                        {
                                                                            columnShipperID
                                                                        }, true));
                columnShipperID.AutoIncrement = true;
                columnShipperID.AutoIncrementSeed = -1;
                columnShipperID.AutoIncrementStep = -1;
                columnShipperID.AllowDBNull = false;
                columnShipperID.ReadOnly = true;
                columnShipperID.Unique = true;
                columnCompanyName.AllowDBNull = false;
                columnCompanyName.MaxLength = 40;
                columnPhone.MaxLength = 24;
            }

            [DebuggerNonUserCode]
            public ShippersRow NewShippersRow()
            {
                return ((ShippersRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ShippersRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof (ShippersRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((ShippersRowChanged != null))
                {
                    ShippersRowChanged(this, new ShippersRowChangeEvent(((ShippersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((ShippersRowChanging != null))
                {
                    ShippersRowChanging(this, new ShippersRowChangeEvent(((ShippersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((ShippersRowDeleted != null))
                {
                    ShippersRowDeleted(this, new ShippersRowChangeEvent(((ShippersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((ShippersRowDeleting != null))
                {
                    ShippersRowDeleting(this, new ShippersRowChangeEvent(((ShippersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveShippersRow(ShippersRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new NorthwindDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ShippersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                             schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: ShippersRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ShippersRow : DataRow
        {
            private readonly ShippersDataTable tableShippers;

            [DebuggerNonUserCode]
            internal ShippersRow(DataRowBuilder rb) :
                base(rb)
            {
                tableShippers = ((ShippersDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public int ShipperID
            {
                get { return ((int) (this[tableShippers.ShipperIDColumn])); }
                set { this[tableShippers.ShipperIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string CompanyName
            {
                get { return ((string) (this[tableShippers.CompanyNameColumn])); }
                set { this[tableShippers.CompanyNameColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Phone
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableShippers.PhoneColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Phone\' in table \'Shippers\' is DBNull.", e);
                    }
                }
                set { this[tableShippers.PhoneColumn] = value; }
            }

            [DebuggerNonUserCode]
            public bool IsPhoneNull()
            {
                return IsNull(tableShippers.PhoneColumn);
            }

            [DebuggerNonUserCode]
            public void SetPhoneNull()
            {
                this[tableShippers.PhoneColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public OrdersRow[] GetOrdersRows()
            {
                if ((Table.ChildRelations["FK_Orders_Shippers"] == null))
                {
                    return new OrdersRow[0];
                }
                else
                {
                    return ((OrdersRow[]) (base.GetChildRows(Table.ChildRelations["FK_Orders_Shippers"])));
                }
            }
        }

        #endregion

        #region Nested type: ShippersRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ShippersRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly ShippersRow eventRow;

            [DebuggerNonUserCode]
            public ShippersRowChangeEvent(ShippersRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public ShippersRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: SuppliersDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class SuppliersDataTable : TypedTableBase<SuppliersRow>
        {
            private DataColumn columnAddress;

            private DataColumn columnCity;
            private DataColumn columnCompanyName;

            private DataColumn columnContactName;

            private DataColumn columnContactTitle;

            private DataColumn columnCountry;

            private DataColumn columnFax;

            private DataColumn columnHomePage;
            private DataColumn columnPhone;
            private DataColumn columnPostalCode;
            private DataColumn columnRegion;
            private DataColumn columnSupplierID;

            [DebuggerNonUserCode]
            public SuppliersDataTable()
            {
                TableName = "Suppliers";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal SuppliersDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected SuppliersDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn SupplierIDColumn
            {
                get { return columnSupplierID; }
            }

            [DebuggerNonUserCode]
            public DataColumn CompanyNameColumn
            {
                get { return columnCompanyName; }
            }

            [DebuggerNonUserCode]
            public DataColumn ContactNameColumn
            {
                get { return columnContactName; }
            }

            [DebuggerNonUserCode]
            public DataColumn ContactTitleColumn
            {
                get { return columnContactTitle; }
            }

            [DebuggerNonUserCode]
            public DataColumn AddressColumn
            {
                get { return columnAddress; }
            }

            [DebuggerNonUserCode]
            public DataColumn CityColumn
            {
                get { return columnCity; }
            }

            [DebuggerNonUserCode]
            public DataColumn RegionColumn
            {
                get { return columnRegion; }
            }

            [DebuggerNonUserCode]
            public DataColumn PostalCodeColumn
            {
                get { return columnPostalCode; }
            }

            [DebuggerNonUserCode]
            public DataColumn CountryColumn
            {
                get { return columnCountry; }
            }

            [DebuggerNonUserCode]
            public DataColumn PhoneColumn
            {
                get { return columnPhone; }
            }

            [DebuggerNonUserCode]
            public DataColumn FaxColumn
            {
                get { return columnFax; }
            }

            [DebuggerNonUserCode]
            public DataColumn HomePageColumn
            {
                get { return columnHomePage; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public SuppliersRow this[int index]
            {
                get { return ((SuppliersRow) (Rows[index])); }
            }

            public event SuppliersRowChangeEventHandler SuppliersRowChanging;

            public event SuppliersRowChangeEventHandler SuppliersRowChanged;

            public event SuppliersRowChangeEventHandler SuppliersRowDeleting;

            public event SuppliersRowChangeEventHandler SuppliersRowDeleted;

            [DebuggerNonUserCode]
            public void AddSuppliersRow(SuppliersRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public SuppliersRow AddSuppliersRow(string CompanyName, string ContactName, string ContactTitle,
                                                string Address, string City, string Region, string PostalCode,
                                                string Country, string Phone, string Fax, string HomePage)
            {
                var rowSuppliersRow = ((SuppliersRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                null,
                                                CompanyName,
                                                ContactName,
                                                ContactTitle,
                                                Address,
                                                City,
                                                Region,
                                                PostalCode,
                                                Country,
                                                Phone,
                                                Fax,
                                                HomePage
                                            };
                rowSuppliersRow.ItemArray = columnValuesArray;
                Rows.Add(rowSuppliersRow);
                return rowSuppliersRow;
            }

            [DebuggerNonUserCode]
            public SuppliersRow FindBySupplierID(int SupplierID)
            {
                return ((SuppliersRow) (Rows.Find(new object[]
                                                      {
                                                          SupplierID
                                                      })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((SuppliersDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new SuppliersDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnSupplierID = base.Columns["SupplierID"];
                columnCompanyName = base.Columns["CompanyName"];
                columnContactName = base.Columns["ContactName"];
                columnContactTitle = base.Columns["ContactTitle"];
                columnAddress = base.Columns["Address"];
                columnCity = base.Columns["City"];
                columnRegion = base.Columns["Region"];
                columnPostalCode = base.Columns["PostalCode"];
                columnCountry = base.Columns["Country"];
                columnPhone = base.Columns["Phone"];
                columnFax = base.Columns["Fax"];
                columnHomePage = base.Columns["HomePage"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnSupplierID = new DataColumn("SupplierID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnSupplierID);
                columnCompanyName = new DataColumn("CompanyName", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCompanyName);
                columnContactName = new DataColumn("ContactName", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnContactName);
                columnContactTitle = new DataColumn("ContactTitle", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnContactTitle);
                columnAddress = new DataColumn("Address", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnAddress);
                columnCity = new DataColumn("City", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCity);
                columnRegion = new DataColumn("Region", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnRegion);
                columnPostalCode = new DataColumn("PostalCode", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnPostalCode);
                columnCountry = new DataColumn("Country", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnCountry);
                columnPhone = new DataColumn("Phone", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnPhone);
                columnFax = new DataColumn("Fax", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnFax);
                columnHomePage = new DataColumn("HomePage", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnHomePage);
                Constraints.Add(new UniqueConstraint("Constraint1", new[]
                                                                        {
                                                                            columnSupplierID
                                                                        }, true));
                columnSupplierID.AutoIncrement = true;
                columnSupplierID.AutoIncrementSeed = -1;
                columnSupplierID.AutoIncrementStep = -1;
                columnSupplierID.AllowDBNull = false;
                columnSupplierID.ReadOnly = true;
                columnSupplierID.Unique = true;
                columnCompanyName.AllowDBNull = false;
                columnCompanyName.MaxLength = 40;
                columnContactName.MaxLength = 30;
                columnContactTitle.MaxLength = 30;
                columnAddress.MaxLength = 60;
                columnCity.MaxLength = 15;
                columnRegion.MaxLength = 15;
                columnPostalCode.MaxLength = 10;
                columnCountry.MaxLength = 15;
                columnPhone.MaxLength = 24;
                columnFax.MaxLength = 24;
                columnHomePage.MaxLength = 1073741823;
            }

            [DebuggerNonUserCode]
            public SuppliersRow NewSuppliersRow()
            {
                return ((SuppliersRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SuppliersRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof (SuppliersRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((SuppliersRowChanged != null))
                {
                    SuppliersRowChanged(this, new SuppliersRowChangeEvent(((SuppliersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((SuppliersRowChanging != null))
                {
                    SuppliersRowChanging(this, new SuppliersRowChangeEvent(((SuppliersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((SuppliersRowDeleted != null))
                {
                    SuppliersRowDeleted(this, new SuppliersRowChangeEvent(((SuppliersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((SuppliersRowDeleting != null))
                {
                    SuppliersRowDeleting(this, new SuppliersRowChangeEvent(((SuppliersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveSuppliersRow(SuppliersRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new NorthwindDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SuppliersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                             schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: SuppliersRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SuppliersRow : DataRow
        {
            private readonly SuppliersDataTable tableSuppliers;

            [DebuggerNonUserCode]
            internal SuppliersRow(DataRowBuilder rb) :
                base(rb)
            {
                tableSuppliers = ((SuppliersDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public int SupplierID
            {
                get { return ((int) (this[tableSuppliers.SupplierIDColumn])); }
                set { this[tableSuppliers.SupplierIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string CompanyName
            {
                get { return ((string) (this[tableSuppliers.CompanyNameColumn])); }
                set { this[tableSuppliers.CompanyNameColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string ContactName
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableSuppliers.ContactNameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ContactName\' in table \'Suppliers\' is DBNull.", e);
                    }
                }
                set { this[tableSuppliers.ContactNameColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string ContactTitle
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableSuppliers.ContactTitleColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'ContactTitle\' in table \'Suppliers\' is DBNull.", e);
                    }
                }
                set { this[tableSuppliers.ContactTitleColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Address
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableSuppliers.AddressColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Address\' in table \'Suppliers\' is DBNull.", e);
                    }
                }
                set { this[tableSuppliers.AddressColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string City
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableSuppliers.CityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'City\' in table \'Suppliers\' is DBNull.", e);
                    }
                }
                set { this[tableSuppliers.CityColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Region
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableSuppliers.RegionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Region\' in table \'Suppliers\' is DBNull.", e);
                    }
                }
                set { this[tableSuppliers.RegionColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string PostalCode
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableSuppliers.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'PostalCode\' in table \'Suppliers\' is DBNull.", e);
                    }
                }
                set { this[tableSuppliers.PostalCodeColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Country
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableSuppliers.CountryColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Country\' in table \'Suppliers\' is DBNull.", e);
                    }
                }
                set { this[tableSuppliers.CountryColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Phone
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableSuppliers.PhoneColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Phone\' in table \'Suppliers\' is DBNull.", e);
                    }
                }
                set { this[tableSuppliers.PhoneColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string Fax
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableSuppliers.FaxColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Fax\' in table \'Suppliers\' is DBNull.", e);
                    }
                }
                set { this[tableSuppliers.FaxColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string HomePage
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableSuppliers.HomePageColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'HomePage\' in table \'Suppliers\' is DBNull.", e);
                    }
                }
                set { this[tableSuppliers.HomePageColumn] = value; }
            }

            [DebuggerNonUserCode]
            public bool IsContactNameNull()
            {
                return IsNull(tableSuppliers.ContactNameColumn);
            }

            [DebuggerNonUserCode]
            public void SetContactNameNull()
            {
                this[tableSuppliers.ContactNameColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsContactTitleNull()
            {
                return IsNull(tableSuppliers.ContactTitleColumn);
            }

            [DebuggerNonUserCode]
            public void SetContactTitleNull()
            {
                this[tableSuppliers.ContactTitleColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsAddressNull()
            {
                return IsNull(tableSuppliers.AddressColumn);
            }

            [DebuggerNonUserCode]
            public void SetAddressNull()
            {
                this[tableSuppliers.AddressColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsCityNull()
            {
                return IsNull(tableSuppliers.CityColumn);
            }

            [DebuggerNonUserCode]
            public void SetCityNull()
            {
                this[tableSuppliers.CityColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsRegionNull()
            {
                return IsNull(tableSuppliers.RegionColumn);
            }

            [DebuggerNonUserCode]
            public void SetRegionNull()
            {
                this[tableSuppliers.RegionColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsPostalCodeNull()
            {
                return IsNull(tableSuppliers.PostalCodeColumn);
            }

            [DebuggerNonUserCode]
            public void SetPostalCodeNull()
            {
                this[tableSuppliers.PostalCodeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsCountryNull()
            {
                return IsNull(tableSuppliers.CountryColumn);
            }

            [DebuggerNonUserCode]
            public void SetCountryNull()
            {
                this[tableSuppliers.CountryColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsPhoneNull()
            {
                return IsNull(tableSuppliers.PhoneColumn);
            }

            [DebuggerNonUserCode]
            public void SetPhoneNull()
            {
                this[tableSuppliers.PhoneColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsFaxNull()
            {
                return IsNull(tableSuppliers.FaxColumn);
            }

            [DebuggerNonUserCode]
            public void SetFaxNull()
            {
                this[tableSuppliers.FaxColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public bool IsHomePageNull()
            {
                return IsNull(tableSuppliers.HomePageColumn);
            }

            [DebuggerNonUserCode]
            public void SetHomePageNull()
            {
                this[tableSuppliers.HomePageColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode]
            public ProductsRow[] GetProductsRows()
            {
                if ((Table.ChildRelations["FK_Products_Suppliers"] == null))
                {
                    return new ProductsRow[0];
                }
                else
                {
                    return ((ProductsRow[]) (base.GetChildRows(Table.ChildRelations["FK_Products_Suppliers"])));
                }
            }
        }

        #endregion

        #region Nested type: SuppliersRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SuppliersRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly SuppliersRow eventRow;

            [DebuggerNonUserCode]
            public SuppliersRowChangeEvent(SuppliersRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public SuppliersRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: TerritoriesDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class TerritoriesDataTable : TypedTableBase<TerritoriesRow>
        {
            private DataColumn columnRegionID;
            private DataColumn columnTerritoryDescription;
            private DataColumn columnTerritoryID;

            [DebuggerNonUserCode]
            public TerritoriesDataTable()
            {
                TableName = "Territories";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal TerritoriesDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected TerritoriesDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn TerritoryIDColumn
            {
                get { return columnTerritoryID; }
            }

            [DebuggerNonUserCode]
            public DataColumn TerritoryDescriptionColumn
            {
                get { return columnTerritoryDescription; }
            }

            [DebuggerNonUserCode]
            public DataColumn RegionIDColumn
            {
                get { return columnRegionID; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public TerritoriesRow this[int index]
            {
                get { return ((TerritoriesRow) (Rows[index])); }
            }

            public event TerritoriesRowChangeEventHandler TerritoriesRowChanging;

            public event TerritoriesRowChangeEventHandler TerritoriesRowChanged;

            public event TerritoriesRowChangeEventHandler TerritoriesRowDeleting;

            public event TerritoriesRowChangeEventHandler TerritoriesRowDeleted;

            [DebuggerNonUserCode]
            public void AddTerritoriesRow(TerritoriesRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public TerritoriesRow AddTerritoriesRow(string TerritoryID, string TerritoryDescription,
                                                    RegionRow parentRegionRowByFK_Territories_Region)
            {
                var rowTerritoriesRow = ((TerritoriesRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                TerritoryID,
                                                TerritoryDescription,
                                                null
                                            };
                if ((parentRegionRowByFK_Territories_Region != null))
                {
                    columnValuesArray[2] = parentRegionRowByFK_Territories_Region[0];
                }
                rowTerritoriesRow.ItemArray = columnValuesArray;
                Rows.Add(rowTerritoriesRow);
                return rowTerritoriesRow;
            }

            [DebuggerNonUserCode]
            public TerritoriesRow FindByTerritoryID(string TerritoryID)
            {
                return ((TerritoriesRow) (Rows.Find(new object[]
                                                        {
                                                            TerritoryID
                                                        })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((TerritoriesDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new TerritoriesDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnTerritoryID = base.Columns["TerritoryID"];
                columnTerritoryDescription = base.Columns["TerritoryDescription"];
                columnRegionID = base.Columns["RegionID"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnTerritoryID = new DataColumn("TerritoryID", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnTerritoryID);
                columnTerritoryDescription = new DataColumn("TerritoryDescription", typeof (string), null,
                                                            MappingType.Element);
                base.Columns.Add(columnTerritoryDescription);
                columnRegionID = new DataColumn("RegionID", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnRegionID);
                Constraints.Add(new UniqueConstraint("Constraint1", new[]
                                                                        {
                                                                            columnTerritoryID
                                                                        }, true));
                columnTerritoryID.AllowDBNull = false;
                columnTerritoryID.Unique = true;
                columnTerritoryID.MaxLength = 20;
                columnTerritoryDescription.AllowDBNull = false;
                columnTerritoryDescription.MaxLength = 50;
                columnRegionID.AllowDBNull = false;
            }

            [DebuggerNonUserCode]
            public TerritoriesRow NewTerritoriesRow()
            {
                return ((TerritoriesRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TerritoriesRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof (TerritoriesRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((TerritoriesRowChanged != null))
                {
                    TerritoriesRowChanged(this, new TerritoriesRowChangeEvent(((TerritoriesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((TerritoriesRowChanging != null))
                {
                    TerritoriesRowChanging(this, new TerritoriesRowChangeEvent(((TerritoriesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((TerritoriesRowDeleted != null))
                {
                    TerritoriesRowDeleted(this, new TerritoriesRowChangeEvent(((TerritoriesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((TerritoriesRowDeleting != null))
                {
                    TerritoriesRowDeleting(this, new TerritoriesRowChangeEvent(((TerritoriesRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveTerritoriesRow(TerritoriesRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new NorthwindDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TerritoriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                             schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: TerritoriesRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TerritoriesRow : DataRow
        {
            private readonly TerritoriesDataTable tableTerritories;

            [DebuggerNonUserCode]
            internal TerritoriesRow(DataRowBuilder rb) :
                base(rb)
            {
                tableTerritories = ((TerritoriesDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public string TerritoryID
            {
                get { return ((string) (this[tableTerritories.TerritoryIDColumn])); }
                set { this[tableTerritories.TerritoryIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string TerritoryDescription
            {
                get { return ((string) (this[tableTerritories.TerritoryDescriptionColumn])); }
                set { this[tableTerritories.TerritoryDescriptionColumn] = value; }
            }

            [DebuggerNonUserCode]
            public int RegionID
            {
                get { return ((int) (this[tableTerritories.RegionIDColumn])); }
                set { this[tableTerritories.RegionIDColumn] = value; }
            }

            [DebuggerNonUserCode]
            public RegionRow RegionRow
            {
                get { return ((RegionRow) (GetParentRow(Table.ParentRelations["FK_Territories_Region"]))); }
                set { SetParentRow(value, Table.ParentRelations["FK_Territories_Region"]); }
            }

            [DebuggerNonUserCode]
            public EmployeeTerritoriesRow[] GetEmployeeTerritoriesRows()
            {
                if ((Table.ChildRelations["FK_EmployeeTerritories_Territories"] == null))
                {
                    return new EmployeeTerritoriesRow[0];
                }
                else
                {
                    return
                        ((EmployeeTerritoriesRow[])
                         (base.GetChildRows(Table.ChildRelations["FK_EmployeeTerritories_Territories"])));
                }
            }
        }

        #endregion

        #region Nested type: TerritoriesRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TerritoriesRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly TerritoriesRow eventRow;

            [DebuggerNonUserCode]
            public TerritoriesRowChangeEvent(TerritoriesRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public TerritoriesRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion
    }
}