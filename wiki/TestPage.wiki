#summary One-sentence summary of this page.

= Introduction =

Add your content here.


= Details =

{{{

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using Microsoft.Practices.Unity;
using Microsoft.Practices.Unity.StaticFactory;

namespace ConsoleApplication3
{
    class Program
    {
        static void Main(string[] args)
        {
            IUnityContainer container =
                (ConfigurationManager.GetSection("core") as Core).Container;

            container.AddNewExtension&lt;StaticFactoryExtension&gt;();
            container.Configure&lt;IStaticFactoryConfiguration&gt;().RegisterFactory&lt;ILogger&gt;
                (
                new FactoryDelegate(c =&gt; Logger.Instance)
                );

            container.Resolve&lt;Presentation&gt;().Show();

            Console.ReadLine();
        }
    }


    public class Presentation
    {
        private AppServices _services;
        private ILogger _log;

        public Presentation(AppServices services, ILogger log)
        {
            _services = services;
            _log = log;
        }
        public void Show()
        {
            _log.Info("pres");
            Console.WriteLine( _services.GetPatientName(1) );
        }
    }
    
    public class AppServices
    {
        [Dependency]
        public ILogger Log
        {
            private get; set;
        }
        
        public string GetPatientName(int id)
        {
            Log.Info("serv");
            return new PatientProvider().GetPatients().Single&lt;Patient&gt;(p =&gt; p.Id == id).Name;
        }
    }
    
    public class PatientProvider
    {
        private ILogger _log = (ConfigurationManager.GetSection("core") as Core).
                    Container.Resolve&lt;ILogger&gt;();            

        public List&lt;Patient&gt; GetPatients()
        {
            _log.Info("prov");
            return new List&lt;Patient&gt;
                       {
                           new Patient{Id=1, Name="Costas1"},
                           new Patient{Id=2, Name="Costas2"},
                           new Patient{Id=3, Name="Costas3"},
                           new Patient{Id=4, Name="Costas4"}
                       };
        }
    }

    public class Patient
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class Logger : ILogger
    {
        private Logger() { }

        private static readonly ILogger _instance = new Logger();

        public static ILogger Instance
        {
            get
            {
                return _instance;
            }
        }

        public void Info(string msg)
        {
            Console.WriteLine(string.Format("info: {0}", msg));
        }
    }

    public interface ILogger
    {
        void Info(string msg);
    }

    public class Core : ConfigurationSection
    {
        private IUnityContainer _container = new UnityContainer();
        public IUnityContainer Container
        {
            get
            {
                return _container;
            }
        }
    }
}

}}}