//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.209
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;

namespace ASPNET.StarterKit.Portal
{
    [Serializable()]
    [DesignerCategory("code")]
    [DebuggerStepThrough()]
    [ToolboxItem(true)]
    public class SiteConfiguration : DataSet
    {
        #region Delegates

        public delegate void GlobalRowChangeEventHandler(object sender, GlobalRowChangeEvent e);

        public delegate void ModuleDefinitionRowChangeEventHandler(object sender, ModuleDefinitionRowChangeEvent e);

        public delegate void ModuleRowChangeEventHandler(object sender, ModuleRowChangeEvent e);

        public delegate void SettingRowChangeEventHandler(object sender, SettingRowChangeEvent e);

        public delegate void SettingsRowChangeEventHandler(object sender, SettingsRowChangeEvent e);

        public delegate void TabRowChangeEventHandler(object sender, TabRowChangeEvent e);

        #endregion

        private DataRelation relationModule_Settings;
        private DataRelation relationSettings_Setting;
        private DataRelation relationTab_Module;

        private GlobalDataTable tableGlobal;

        private ModuleDataTable tableModule;

        private ModuleDefinitionDataTable tableModuleDefinition;
        private SettingDataTable tableSetting;
        private SettingsDataTable tableSettings;
        private TabDataTable tableTab;

        public SiteConfiguration()
        {
            InitClass();
            var schemaChangedHandler = new CollectionChangeEventHandler(SchemaChanged);
            Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        protected SiteConfiguration(SerializationInfo info, StreamingContext context)
        {
            var strSchema = ((string) (info.GetValue("XmlSchema", typeof (string))));
            if ((strSchema != null))
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
                if ((ds.Tables["Global"] != null))
                {
                    Tables.Add(new GlobalDataTable(ds.Tables["Global"]));
                }
                if ((ds.Tables["Tab"] != null))
                {
                    Tables.Add(new TabDataTable(ds.Tables["Tab"]));
                }
                if ((ds.Tables["Module"] != null))
                {
                    Tables.Add(new ModuleDataTable(ds.Tables["Module"]));
                }
                if ((ds.Tables["Settings"] != null))
                {
                    Tables.Add(new SettingsDataTable(ds.Tables["Settings"]));
                }
                if ((ds.Tables["Setting"] != null))
                {
                    Tables.Add(new SettingDataTable(ds.Tables["Setting"]));
                }
                if ((ds.Tables["ModuleDefinition"] != null))
                {
                    Tables.Add(new ModuleDefinitionDataTable(ds.Tables["ModuleDefinition"]));
                }
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                InitClass();
            }
            GetSerializationData(info, context);
            var schemaChangedHandler = new CollectionChangeEventHandler(SchemaChanged);
            Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public GlobalDataTable Global
        {
            get { return tableGlobal; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public TabDataTable Tab
        {
            get { return tableTab; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ModuleDataTable Module
        {
            get { return tableModule; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public SettingsDataTable Settings
        {
            get { return tableSettings; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public SettingDataTable Setting
        {
            get { return tableSetting; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ModuleDefinitionDataTable ModuleDefinition
        {
            get { return tableModuleDefinition; }
        }

        public override DataSet Clone()
        {
            var cln = ((SiteConfiguration) (base.Clone()));
            cln.InitVars();
            return cln;
        }

        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        protected override void ReadXmlSerializable(XmlReader reader)
        {
            Reset();
            var ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Global"] != null))
            {
                Tables.Add(new GlobalDataTable(ds.Tables["Global"]));
            }
            if ((ds.Tables["Tab"] != null))
            {
                Tables.Add(new TabDataTable(ds.Tables["Tab"]));
            }
            if ((ds.Tables["Module"] != null))
            {
                Tables.Add(new ModuleDataTable(ds.Tables["Module"]));
            }
            if ((ds.Tables["Settings"] != null))
            {
                Tables.Add(new SettingsDataTable(ds.Tables["Settings"]));
            }
            if ((ds.Tables["Setting"] != null))
            {
                Tables.Add(new SettingDataTable(ds.Tables["Setting"]));
            }
            if ((ds.Tables["ModuleDefinition"] != null))
            {
                Tables.Add(new ModuleDefinitionDataTable(ds.Tables["ModuleDefinition"]));
            }
            DataSetName = ds.DataSetName;
            Prefix = ds.Prefix;
            Namespace = ds.Namespace;
            Locale = ds.Locale;
            CaseSensitive = ds.CaseSensitive;
            EnforceConstraints = ds.EnforceConstraints;
            Merge(ds, false, MissingSchemaAction.Add);
            InitVars();
        }

        protected override XmlSchema GetSchemaSerializable()
        {
            var stream = new MemoryStream();
            WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return XmlSchema.Read(new XmlTextReader(stream), null);
        }

        internal void InitVars()
        {
            tableGlobal = ((GlobalDataTable) (Tables["Global"]));
            if ((tableGlobal != null))
            {
                tableGlobal.InitVars();
            }
            tableTab = ((TabDataTable) (Tables["Tab"]));
            if ((tableTab != null))
            {
                tableTab.InitVars();
            }
            tableModule = ((ModuleDataTable) (Tables["Module"]));
            if ((tableModule != null))
            {
                tableModule.InitVars();
            }
            tableSettings = ((SettingsDataTable) (Tables["Settings"]));
            if ((tableSettings != null))
            {
                tableSettings.InitVars();
            }
            tableSetting = ((SettingDataTable) (Tables["Setting"]));
            if ((tableSetting != null))
            {
                tableSetting.InitVars();
            }
            tableModuleDefinition = ((ModuleDefinitionDataTable) (Tables["ModuleDefinition"]));
            if ((tableModuleDefinition != null))
            {
                tableModuleDefinition.InitVars();
            }
            relationSettings_Setting = Relations["Settings_Setting"];
            relationModule_Settings = Relations["Module_Settings"];
            relationTab_Module = Relations["Tab_Module"];
        }

        private void InitClass()
        {
            DataSetName = "SiteConfiguration";
            Prefix = "";
            Namespace = "http://tempuri.org/PortalCfg.xsd";
            Locale = new CultureInfo("en-US");
            CaseSensitive = false;
            EnforceConstraints = false;
            tableGlobal = new GlobalDataTable();
            Tables.Add(tableGlobal);
            tableTab = new TabDataTable();
            Tables.Add(tableTab);
            tableModule = new ModuleDataTable();
            Tables.Add(tableModule);
            tableSettings = new SettingsDataTable();
            Tables.Add(tableSettings);
            tableSetting = new SettingDataTable();
            Tables.Add(tableSetting);
            tableModuleDefinition = new ModuleDefinitionDataTable();
            Tables.Add(tableModuleDefinition);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("Tab_Module", new DataColumn[]
                                                             {
                                                                 tableTab.TabIdColumn
                                                             }, new DataColumn[]
                                                                    {
                                                                        tableModule.TabIdColumn
                                                                    });
            tableModule.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Module_Settings", new DataColumn[]
                                                                  {
                                                                      tableModule.ModuleIdColumn
                                                                  }, new DataColumn[]
                                                                         {
                                                                             tableSettings.ModuleIdColumn
                                                                         });
            tableSettings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Settings_Setting", new DataColumn[]
                                                                   {
                                                                       tableSettings.Settings_IdColumn
                                                                   }, new DataColumn[]
                                                                          {
                                                                              tableSetting.Settings_IdColumn
                                                                          });
            tableSetting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            relationSettings_Setting = new DataRelation("Settings_Setting", new DataColumn[]
                                                                                {
                                                                                    tableSettings.Settings_IdColumn
                                                                                }, new DataColumn[]
                                                                                       {
                                                                                           tableSetting.
                                                                                               Settings_IdColumn
                                                                                       }, false);
            relationSettings_Setting.Nested = true;
            Relations.Add(relationSettings_Setting);
            relationModule_Settings = new DataRelation("Module_Settings", new DataColumn[]
                                                                              {
                                                                                  tableModule.ModuleIdColumn
                                                                              }, new DataColumn[]
                                                                                     {
                                                                                         tableSettings.ModuleIdColumn
                                                                                     }, false);
            relationModule_Settings.Nested = true;
            Relations.Add(relationModule_Settings);
            relationTab_Module = new DataRelation("Tab_Module", new DataColumn[]
                                                                    {
                                                                        tableTab.TabIdColumn
                                                                    }, new DataColumn[]
                                                                           {
                                                                               tableModule.TabIdColumn
                                                                           }, false);
            relationTab_Module.Nested = true;
            Relations.Add(relationTab_Module);
        }

        private bool ShouldSerializeGlobal()
        {
            return false;
        }

        private bool ShouldSerializeTab()
        {
            return false;
        }

        private bool ShouldSerializeModule()
        {
            return false;
        }

        private bool ShouldSerializeSettings()
        {
            return false;
        }

        private bool ShouldSerializeSetting()
        {
            return false;
        }

        private bool ShouldSerializeModuleDefinition()
        {
            return false;
        }

        private void SchemaChanged(object sender, CollectionChangeEventArgs e)
        {
            if ((e.Action == CollectionChangeAction.Remove))
            {
                InitVars();
            }
        }

        #region Nested type: GlobalDataTable

        [DebuggerStepThrough()]
        public class GlobalDataTable : DataTable, IEnumerable
        {
            private DataColumn columnAlwaysShowEditButton;
            private DataColumn columnPortalId;

            private DataColumn columnPortalName;

            internal GlobalDataTable() :
                base("Global")
            {
                InitClass();
            }

            internal GlobalDataTable(DataTable table) :
                base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            internal DataColumn PortalIdColumn
            {
                get { return columnPortalId; }
            }

            internal DataColumn PortalNameColumn
            {
                get { return columnPortalName; }
            }

            internal DataColumn AlwaysShowEditButtonColumn
            {
                get { return columnAlwaysShowEditButton; }
            }

            public GlobalRow this[int index]
            {
                get { return ((GlobalRow) (Rows[index])); }
            }

            #region IEnumerable Members

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            #endregion

            public event GlobalRowChangeEventHandler GlobalRowChanged;

            public event GlobalRowChangeEventHandler GlobalRowChanging;

            public event GlobalRowChangeEventHandler GlobalRowDeleted;

            public event GlobalRowChangeEventHandler GlobalRowDeleting;

            public void AddGlobalRow(GlobalRow row)
            {
                Rows.Add(row);
            }

            public GlobalRow AddGlobalRow(int PortalId, string PortalName, bool AlwaysShowEditButton)
            {
                var rowGlobalRow = ((GlobalRow) (NewRow()));
                rowGlobalRow.ItemArray = new object[]
                                             {
                                                 PortalId,
                                                 PortalName,
                                                 AlwaysShowEditButton
                                             };
                Rows.Add(rowGlobalRow);
                return rowGlobalRow;
            }

            public GlobalRow FindByPortalId(int PortalId)
            {
                return ((GlobalRow) (Rows.Find(new object[]
                                                   {
                                                       PortalId
                                                   })));
            }

            public override DataTable Clone()
            {
                var cln = ((GlobalDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new GlobalDataTable();
            }

            internal void InitVars()
            {
                columnPortalId = Columns["PortalId"];
                columnPortalName = Columns["PortalName"];
                columnAlwaysShowEditButton = Columns["AlwaysShowEditButton"];
            }

            private void InitClass()
            {
                columnPortalId = new DataColumn("PortalId", typeof (int), null, MappingType.Attribute);
                Columns.Add(columnPortalId);
                columnPortalName = new DataColumn("PortalName", typeof (string), null, MappingType.Attribute);
                Columns.Add(columnPortalName);
                columnAlwaysShowEditButton = new DataColumn("AlwaysShowEditButton", typeof (bool), null,
                                                            MappingType.Attribute);
                Columns.Add(columnAlwaysShowEditButton);
                Constraints.Add(new UniqueConstraint("GlobalKey", new DataColumn[]
                                                                      {
                                                                          columnPortalId
                                                                      }, true));
                columnPortalId.AllowDBNull = false;
                columnPortalId.Unique = true;
                columnPortalId.Namespace = "";
                columnPortalName.Namespace = "";
                columnAlwaysShowEditButton.Namespace = "";
            }

            public GlobalRow NewGlobalRow()
            {
                return ((GlobalRow) (NewRow()));
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new GlobalRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof (GlobalRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((GlobalRowChanged != null))
                {
                    GlobalRowChanged(this, new GlobalRowChangeEvent(((GlobalRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((GlobalRowChanging != null))
                {
                    GlobalRowChanging(this, new GlobalRowChangeEvent(((GlobalRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((GlobalRowDeleted != null))
                {
                    GlobalRowDeleted(this, new GlobalRowChangeEvent(((GlobalRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((GlobalRowDeleting != null))
                {
                    GlobalRowDeleting(this, new GlobalRowChangeEvent(((GlobalRow) (e.Row)), e.Action));
                }
            }

            public void RemoveGlobalRow(GlobalRow row)
            {
                Rows.Remove(row);
            }
        }

        #endregion

        #region Nested type: GlobalRow

        [DebuggerStepThrough()]
        public class GlobalRow : DataRow
        {
            private GlobalDataTable tableGlobal;

            internal GlobalRow(DataRowBuilder rb) :
                base(rb)
            {
                tableGlobal = ((GlobalDataTable) (Table));
            }

            public int PortalId
            {
                get { return ((int) (this[tableGlobal.PortalIdColumn])); }
                set { this[tableGlobal.PortalIdColumn] = value; }
            }

            public string PortalName
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableGlobal.PortalNameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableGlobal.PortalNameColumn] = value; }
            }

            public bool AlwaysShowEditButton
            {
                get
                {
                    try
                    {
                        return ((bool) (this[tableGlobal.AlwaysShowEditButtonColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableGlobal.AlwaysShowEditButtonColumn] = value; }
            }

            public bool IsPortalNameNull()
            {
                return IsNull(tableGlobal.PortalNameColumn);
            }

            public void SetPortalNameNull()
            {
                this[tableGlobal.PortalNameColumn] = Convert.DBNull;
            }

            public bool IsAlwaysShowEditButtonNull()
            {
                return IsNull(tableGlobal.AlwaysShowEditButtonColumn);
            }

            public void SetAlwaysShowEditButtonNull()
            {
                this[tableGlobal.AlwaysShowEditButtonColumn] = Convert.DBNull;
            }
        }

        #endregion

        #region Nested type: GlobalRowChangeEvent

        [DebuggerStepThrough()]
        public class GlobalRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private GlobalRow eventRow;

            public GlobalRowChangeEvent(GlobalRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            public GlobalRow Row
            {
                get { return eventRow; }
            }

            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: ModuleDataTable

        [DebuggerStepThrough()]
        public class ModuleDataTable : DataTable, IEnumerable
        {
            private DataColumn columnCacheTimeout;
            private DataColumn columnEditRoles;

            private DataColumn columnModuleDefId;
            private DataColumn columnModuleId;

            private DataColumn columnModuleOrder;
            private DataColumn columnModuleTitle;
            private DataColumn columnPaneName;

            private DataColumn columnShowMobile;

            private DataColumn columnTabId;

            internal ModuleDataTable() :
                base("Module")
            {
                InitClass();
            }

            internal ModuleDataTable(DataTable table) :
                base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            internal DataColumn ModuleIdColumn
            {
                get { return columnModuleId; }
            }

            internal DataColumn ModuleTitleColumn
            {
                get { return columnModuleTitle; }
            }

            internal DataColumn EditRolesColumn
            {
                get { return columnEditRoles; }
            }

            internal DataColumn ModuleDefIdColumn
            {
                get { return columnModuleDefId; }
            }

            internal DataColumn PaneNameColumn
            {
                get { return columnPaneName; }
            }

            internal DataColumn CacheTimeoutColumn
            {
                get { return columnCacheTimeout; }
            }

            internal DataColumn ModuleOrderColumn
            {
                get { return columnModuleOrder; }
            }

            internal DataColumn ShowMobileColumn
            {
                get { return columnShowMobile; }
            }

            internal DataColumn TabIdColumn
            {
                get { return columnTabId; }
            }

            public ModuleRow this[int index]
            {
                get { return ((ModuleRow) (Rows[index])); }
            }

            #region IEnumerable Members

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            #endregion

            public event ModuleRowChangeEventHandler ModuleRowChanged;

            public event ModuleRowChangeEventHandler ModuleRowChanging;

            public event ModuleRowChangeEventHandler ModuleRowDeleted;

            public event ModuleRowChangeEventHandler ModuleRowDeleting;

            public void AddModuleRow(ModuleRow row)
            {
                Rows.Add(row);
            }

            public ModuleRow AddModuleRow(int ModuleId, string ModuleTitle, string EditRoles, int ModuleDefId,
                                          string PaneName, int CacheTimeout, int ModuleOrder, bool ShowMobile,
                                          TabRow parentTabRowByTab_Module)
            {
                var rowModuleRow = ((ModuleRow) (NewRow()));
                rowModuleRow.ItemArray = new object[]
                                             {
                                                 ModuleId,
                                                 ModuleTitle,
                                                 EditRoles,
                                                 ModuleDefId,
                                                 PaneName,
                                                 CacheTimeout,
                                                 ModuleOrder,
                                                 ShowMobile,
                                                 parentTabRowByTab_Module[0]
                                             };
                Rows.Add(rowModuleRow);
                return rowModuleRow;
            }

            public ModuleRow FindByModuleId(int ModuleId)
            {
                return ((ModuleRow) (Rows.Find(new object[]
                                                   {
                                                       ModuleId
                                                   })));
            }

            public override DataTable Clone()
            {
                var cln = ((ModuleDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new ModuleDataTable();
            }

            internal void InitVars()
            {
                columnModuleId = Columns["ModuleId"];
                columnModuleTitle = Columns["ModuleTitle"];
                columnEditRoles = Columns["EditRoles"];
                columnModuleDefId = Columns["ModuleDefId"];
                columnPaneName = Columns["PaneName"];
                columnCacheTimeout = Columns["CacheTimeout"];
                columnModuleOrder = Columns["ModuleOrder"];
                columnShowMobile = Columns["ShowMobile"];
                columnTabId = Columns["TabId"];
            }

            private void InitClass()
            {
                columnModuleId = new DataColumn("ModuleId", typeof (int), null, MappingType.Attribute);
                Columns.Add(columnModuleId);
                columnModuleTitle = new DataColumn("ModuleTitle", typeof (string), null, MappingType.Attribute);
                Columns.Add(columnModuleTitle);
                columnEditRoles = new DataColumn("EditRoles", typeof (string), null, MappingType.Attribute);
                Columns.Add(columnEditRoles);
                columnModuleDefId = new DataColumn("ModuleDefId", typeof (int), null, MappingType.Attribute);
                Columns.Add(columnModuleDefId);
                columnPaneName = new DataColumn("PaneName", typeof (string), null, MappingType.Attribute);
                Columns.Add(columnPaneName);
                columnCacheTimeout = new DataColumn("CacheTimeout", typeof (int), null, MappingType.Attribute);
                Columns.Add(columnCacheTimeout);
                columnModuleOrder = new DataColumn("ModuleOrder", typeof (int), null, MappingType.Attribute);
                Columns.Add(columnModuleOrder);
                columnShowMobile = new DataColumn("ShowMobile", typeof (bool), null, MappingType.Attribute);
                Columns.Add(columnShowMobile);
                columnTabId = new DataColumn("TabId", typeof (int), null, MappingType.Hidden);
                Columns.Add(columnTabId);
                Constraints.Add(new UniqueConstraint("ModuleKey", new DataColumn[]
                                                                      {
                                                                          columnModuleId
                                                                      }, true));
                columnModuleId.AllowDBNull = false;
                columnModuleId.Unique = true;
                columnModuleId.Namespace = "";
                columnModuleTitle.Namespace = "";
                columnEditRoles.Namespace = "";
                columnModuleDefId.Namespace = "";
                columnPaneName.Namespace = "";
                columnCacheTimeout.Namespace = "";
                columnModuleOrder.Namespace = "";
                columnShowMobile.Namespace = "";
            }

            public ModuleRow NewModuleRow()
            {
                return ((ModuleRow) (NewRow()));
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ModuleRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof (ModuleRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((ModuleRowChanged != null))
                {
                    ModuleRowChanged(this, new ModuleRowChangeEvent(((ModuleRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((ModuleRowChanging != null))
                {
                    ModuleRowChanging(this, new ModuleRowChangeEvent(((ModuleRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((ModuleRowDeleted != null))
                {
                    ModuleRowDeleted(this, new ModuleRowChangeEvent(((ModuleRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((ModuleRowDeleting != null))
                {
                    ModuleRowDeleting(this, new ModuleRowChangeEvent(((ModuleRow) (e.Row)), e.Action));
                }
            }

            public void RemoveModuleRow(ModuleRow row)
            {
                Rows.Remove(row);
            }
        }

        #endregion

        #region Nested type: ModuleDefinitionDataTable

        [DebuggerStepThrough()]
        public class ModuleDefinitionDataTable : DataTable, IEnumerable
        {
            private DataColumn columnDesktopSourceFile;
            private DataColumn columnFriendlyName;

            private DataColumn columnMobileSourceFile;

            private DataColumn columnModuleDefId;

            internal ModuleDefinitionDataTable() :
                base("ModuleDefinition")
            {
                InitClass();
            }

            internal ModuleDefinitionDataTable(DataTable table) :
                base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            internal DataColumn FriendlyNameColumn
            {
                get { return columnFriendlyName; }
            }

            internal DataColumn MobileSourceFileColumn
            {
                get { return columnMobileSourceFile; }
            }

            internal DataColumn DesktopSourceFileColumn
            {
                get { return columnDesktopSourceFile; }
            }

            internal DataColumn ModuleDefIdColumn
            {
                get { return columnModuleDefId; }
            }

            public ModuleDefinitionRow this[int index]
            {
                get { return ((ModuleDefinitionRow) (Rows[index])); }
            }

            #region IEnumerable Members

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            #endregion

            public event ModuleDefinitionRowChangeEventHandler ModuleDefinitionRowChanged;

            public event ModuleDefinitionRowChangeEventHandler ModuleDefinitionRowChanging;

            public event ModuleDefinitionRowChangeEventHandler ModuleDefinitionRowDeleted;

            public event ModuleDefinitionRowChangeEventHandler ModuleDefinitionRowDeleting;

            public void AddModuleDefinitionRow(ModuleDefinitionRow row)
            {
                Rows.Add(row);
            }

            public ModuleDefinitionRow AddModuleDefinitionRow(string FriendlyName, string MobileSourceFile,
                                                              string DesktopSourceFile, int ModuleDefId)
            {
                var rowModuleDefinitionRow = ((ModuleDefinitionRow) (NewRow()));
                rowModuleDefinitionRow.ItemArray = new object[]
                                                       {
                                                           FriendlyName,
                                                           MobileSourceFile,
                                                           DesktopSourceFile,
                                                           ModuleDefId
                                                       };
                Rows.Add(rowModuleDefinitionRow);
                return rowModuleDefinitionRow;
            }

            public ModuleDefinitionRow FindByModuleDefId(int ModuleDefId)
            {
                return ((ModuleDefinitionRow) (Rows.Find(new object[]
                                                             {
                                                                 ModuleDefId
                                                             })));
            }

            public override DataTable Clone()
            {
                var cln = ((ModuleDefinitionDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new ModuleDefinitionDataTable();
            }

            internal void InitVars()
            {
                columnFriendlyName = Columns["FriendlyName"];
                columnMobileSourceFile = Columns["MobileSourceFile"];
                columnDesktopSourceFile = Columns["DesktopSourceFile"];
                columnModuleDefId = Columns["ModuleDefId"];
            }

            private void InitClass()
            {
                columnFriendlyName = new DataColumn("FriendlyName", typeof (string), null, MappingType.Attribute);
                Columns.Add(columnFriendlyName);
                columnMobileSourceFile = new DataColumn("MobileSourceFile", typeof (string), null, MappingType.Attribute);
                Columns.Add(columnMobileSourceFile);
                columnDesktopSourceFile = new DataColumn("DesktopSourceFile", typeof (string), null,
                                                         MappingType.Attribute);
                Columns.Add(columnDesktopSourceFile);
                columnModuleDefId = new DataColumn("ModuleDefId", typeof (int), null, MappingType.Attribute);
                Columns.Add(columnModuleDefId);
                Constraints.Add(new UniqueConstraint("ModDefKey", new DataColumn[]
                                                                      {
                                                                          columnModuleDefId
                                                                      }, true));
                columnFriendlyName.Namespace = "";
                columnMobileSourceFile.Namespace = "";
                columnDesktopSourceFile.Namespace = "";
                columnModuleDefId.AllowDBNull = false;
                columnModuleDefId.Unique = true;
                columnModuleDefId.Namespace = "";
            }

            public ModuleDefinitionRow NewModuleDefinitionRow()
            {
                return ((ModuleDefinitionRow) (NewRow()));
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ModuleDefinitionRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof (ModuleDefinitionRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((ModuleDefinitionRowChanged != null))
                {
                    ModuleDefinitionRowChanged(this,
                                               new ModuleDefinitionRowChangeEvent(((ModuleDefinitionRow) (e.Row)),
                                                                                  e.Action));
                }
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((ModuleDefinitionRowChanging != null))
                {
                    ModuleDefinitionRowChanging(this,
                                                new ModuleDefinitionRowChangeEvent(((ModuleDefinitionRow) (e.Row)),
                                                                                   e.Action));
                }
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((ModuleDefinitionRowDeleted != null))
                {
                    ModuleDefinitionRowDeleted(this,
                                               new ModuleDefinitionRowChangeEvent(((ModuleDefinitionRow) (e.Row)),
                                                                                  e.Action));
                }
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((ModuleDefinitionRowDeleting != null))
                {
                    ModuleDefinitionRowDeleting(this,
                                                new ModuleDefinitionRowChangeEvent(((ModuleDefinitionRow) (e.Row)),
                                                                                   e.Action));
                }
            }

            public void RemoveModuleDefinitionRow(ModuleDefinitionRow row)
            {
                Rows.Remove(row);
            }
        }

        #endregion

        #region Nested type: ModuleDefinitionRow

        [DebuggerStepThrough()]
        public class ModuleDefinitionRow : DataRow
        {
            private ModuleDefinitionDataTable tableModuleDefinition;

            internal ModuleDefinitionRow(DataRowBuilder rb) :
                base(rb)
            {
                tableModuleDefinition = ((ModuleDefinitionDataTable) (Table));
            }

            public string FriendlyName
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableModuleDefinition.FriendlyNameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableModuleDefinition.FriendlyNameColumn] = value; }
            }

            public string MobileSourceFile
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableModuleDefinition.MobileSourceFileColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableModuleDefinition.MobileSourceFileColumn] = value; }
            }

            public string DesktopSourceFile
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableModuleDefinition.DesktopSourceFileColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableModuleDefinition.DesktopSourceFileColumn] = value; }
            }

            public int ModuleDefId
            {
                get { return ((int) (this[tableModuleDefinition.ModuleDefIdColumn])); }
                set { this[tableModuleDefinition.ModuleDefIdColumn] = value; }
            }

            public bool IsFriendlyNameNull()
            {
                return IsNull(tableModuleDefinition.FriendlyNameColumn);
            }

            public void SetFriendlyNameNull()
            {
                this[tableModuleDefinition.FriendlyNameColumn] = Convert.DBNull;
            }

            public bool IsMobileSourceFileNull()
            {
                return IsNull(tableModuleDefinition.MobileSourceFileColumn);
            }

            public void SetMobileSourceFileNull()
            {
                this[tableModuleDefinition.MobileSourceFileColumn] = Convert.DBNull;
            }

            public bool IsDesktopSourceFileNull()
            {
                return IsNull(tableModuleDefinition.DesktopSourceFileColumn);
            }

            public void SetDesktopSourceFileNull()
            {
                this[tableModuleDefinition.DesktopSourceFileColumn] = Convert.DBNull;
            }
        }

        #endregion

        #region Nested type: ModuleDefinitionRowChangeEvent

        [DebuggerStepThrough()]
        public class ModuleDefinitionRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private ModuleDefinitionRow eventRow;

            public ModuleDefinitionRowChangeEvent(ModuleDefinitionRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            public ModuleDefinitionRow Row
            {
                get { return eventRow; }
            }

            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: ModuleRow

        [DebuggerStepThrough()]
        public class ModuleRow : DataRow
        {
            private ModuleDataTable tableModule;

            internal ModuleRow(DataRowBuilder rb) :
                base(rb)
            {
                tableModule = ((ModuleDataTable) (Table));
            }

            public int ModuleId
            {
                get { return ((int) (this[tableModule.ModuleIdColumn])); }
                set { this[tableModule.ModuleIdColumn] = value; }
            }

            public string ModuleTitle
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableModule.ModuleTitleColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableModule.ModuleTitleColumn] = value; }
            }

            public string EditRoles
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableModule.EditRolesColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableModule.EditRolesColumn] = value; }
            }

            public int ModuleDefId
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableModule.ModuleDefIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableModule.ModuleDefIdColumn] = value; }
            }

            public string PaneName
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableModule.PaneNameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableModule.PaneNameColumn] = value; }
            }

            public int CacheTimeout
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableModule.CacheTimeoutColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableModule.CacheTimeoutColumn] = value; }
            }

            public int ModuleOrder
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableModule.ModuleOrderColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableModule.ModuleOrderColumn] = value; }
            }

            public bool ShowMobile
            {
                get
                {
                    try
                    {
                        return ((bool) (this[tableModule.ShowMobileColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableModule.ShowMobileColumn] = value; }
            }

            public TabRow TabRow
            {
                get { return ((TabRow) (GetParentRow(Table.ParentRelations["Tab_Module"]))); }
                set { SetParentRow(value, Table.ParentRelations["Tab_Module"]); }
            }

            public bool IsModuleTitleNull()
            {
                return IsNull(tableModule.ModuleTitleColumn);
            }

            public void SetModuleTitleNull()
            {
                this[tableModule.ModuleTitleColumn] = Convert.DBNull;
            }

            public bool IsEditRolesNull()
            {
                return IsNull(tableModule.EditRolesColumn);
            }

            public void SetEditRolesNull()
            {
                this[tableModule.EditRolesColumn] = Convert.DBNull;
            }

            public bool IsModuleDefIdNull()
            {
                return IsNull(tableModule.ModuleDefIdColumn);
            }

            public void SetModuleDefIdNull()
            {
                this[tableModule.ModuleDefIdColumn] = Convert.DBNull;
            }

            public bool IsPaneNameNull()
            {
                return IsNull(tableModule.PaneNameColumn);
            }

            public void SetPaneNameNull()
            {
                this[tableModule.PaneNameColumn] = Convert.DBNull;
            }

            public bool IsCacheTimeoutNull()
            {
                return IsNull(tableModule.CacheTimeoutColumn);
            }

            public void SetCacheTimeoutNull()
            {
                this[tableModule.CacheTimeoutColumn] = Convert.DBNull;
            }

            public bool IsModuleOrderNull()
            {
                return IsNull(tableModule.ModuleOrderColumn);
            }

            public void SetModuleOrderNull()
            {
                this[tableModule.ModuleOrderColumn] = Convert.DBNull;
            }

            public bool IsShowMobileNull()
            {
                return IsNull(tableModule.ShowMobileColumn);
            }

            public void SetShowMobileNull()
            {
                this[tableModule.ShowMobileColumn] = Convert.DBNull;
            }

            public SettingsRow[] GetSettingsRows()
            {
                return ((SettingsRow[]) (GetChildRows(Table.ChildRelations["Module_Settings"])));
            }
        }

        #endregion

        #region Nested type: ModuleRowChangeEvent

        [DebuggerStepThrough()]
        public class ModuleRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private ModuleRow eventRow;

            public ModuleRowChangeEvent(ModuleRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            public ModuleRow Row
            {
                get { return eventRow; }
            }

            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: SettingDataTable

        [DebuggerStepThrough()]
        public class SettingDataTable : DataTable, IEnumerable
        {
            private DataColumn columnName;

            private DataColumn columnSetting_Text;

            private DataColumn columnSettings_Id;

            internal SettingDataTable() :
                base("Setting")
            {
                InitClass();
            }

            internal SettingDataTable(DataTable table) :
                base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            internal DataColumn NameColumn
            {
                get { return columnName; }
            }

            internal DataColumn Setting_TextColumn
            {
                get { return columnSetting_Text; }
            }

            internal DataColumn Settings_IdColumn
            {
                get { return columnSettings_Id; }
            }

            public SettingRow this[int index]
            {
                get { return ((SettingRow) (Rows[index])); }
            }

            #region IEnumerable Members

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            #endregion

            public event SettingRowChangeEventHandler SettingRowChanged;

            public event SettingRowChangeEventHandler SettingRowChanging;

            public event SettingRowChangeEventHandler SettingRowDeleted;

            public event SettingRowChangeEventHandler SettingRowDeleting;

            public void AddSettingRow(SettingRow row)
            {
                Rows.Add(row);
            }

            public SettingRow AddSettingRow(string Name, string Setting_Text,
                                            SettingsRow parentSettingsRowBySettings_Setting)
            {
                var rowSettingRow = ((SettingRow) (NewRow()));
                rowSettingRow.ItemArray = new object[]
                                              {
                                                  Name,
                                                  Setting_Text,
                                                  parentSettingsRowBySettings_Setting[0]
                                              };
                Rows.Add(rowSettingRow);
                return rowSettingRow;
            }

            public override DataTable Clone()
            {
                var cln = ((SettingDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new SettingDataTable();
            }

            internal void InitVars()
            {
                columnName = Columns["Name"];
                columnSetting_Text = Columns["Setting_Text"];
                columnSettings_Id = Columns["Settings_Id"];
            }

            private void InitClass()
            {
                columnName = new DataColumn("Name", typeof (string), null, MappingType.Attribute);
                Columns.Add(columnName);
                columnSetting_Text = new DataColumn("Setting_Text", typeof (string), null, MappingType.SimpleContent);
                Columns.Add(columnSetting_Text);
                columnSettings_Id = new DataColumn("Settings_Id", typeof (int), null, MappingType.Hidden);
                Columns.Add(columnSettings_Id);
                columnName.Namespace = "";
            }

            public SettingRow NewSettingRow()
            {
                return ((SettingRow) (NewRow()));
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SettingRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof (SettingRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((SettingRowChanged != null))
                {
                    SettingRowChanged(this, new SettingRowChangeEvent(((SettingRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((SettingRowChanging != null))
                {
                    SettingRowChanging(this, new SettingRowChangeEvent(((SettingRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((SettingRowDeleted != null))
                {
                    SettingRowDeleted(this, new SettingRowChangeEvent(((SettingRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((SettingRowDeleting != null))
                {
                    SettingRowDeleting(this, new SettingRowChangeEvent(((SettingRow) (e.Row)), e.Action));
                }
            }

            public void RemoveSettingRow(SettingRow row)
            {
                Rows.Remove(row);
            }
        }

        #endregion

        #region Nested type: SettingRow

        [DebuggerStepThrough()]
        public class SettingRow : DataRow
        {
            private SettingDataTable tableSetting;

            internal SettingRow(DataRowBuilder rb) :
                base(rb)
            {
                tableSetting = ((SettingDataTable) (Table));
            }

            public string Name
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableSetting.NameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableSetting.NameColumn] = value; }
            }

            public string Setting_Text
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableSetting.Setting_TextColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableSetting.Setting_TextColumn] = value; }
            }

            public SettingsRow SettingsRow
            {
                get { return ((SettingsRow) (GetParentRow(Table.ParentRelations["Settings_Setting"]))); }
                set { SetParentRow(value, Table.ParentRelations["Settings_Setting"]); }
            }

            public bool IsNameNull()
            {
                return IsNull(tableSetting.NameColumn);
            }

            public void SetNameNull()
            {
                this[tableSetting.NameColumn] = Convert.DBNull;
            }

            public bool IsSetting_TextNull()
            {
                return IsNull(tableSetting.Setting_TextColumn);
            }

            public void SetSetting_TextNull()
            {
                this[tableSetting.Setting_TextColumn] = Convert.DBNull;
            }
        }

        #endregion

        #region Nested type: SettingRowChangeEvent

        [DebuggerStepThrough()]
        public class SettingRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private SettingRow eventRow;

            public SettingRowChangeEvent(SettingRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            public SettingRow Row
            {
                get { return eventRow; }
            }

            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: SettingsDataTable

        [DebuggerStepThrough()]
        public class SettingsDataTable : DataTable, IEnumerable
        {
            private DataColumn columnModuleId;
            private DataColumn columnSettings_Id;

            internal SettingsDataTable() :
                base("Settings")
            {
                InitClass();
            }

            internal SettingsDataTable(DataTable table) :
                base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            internal DataColumn Settings_IdColumn
            {
                get { return columnSettings_Id; }
            }

            internal DataColumn ModuleIdColumn
            {
                get { return columnModuleId; }
            }

            public SettingsRow this[int index]
            {
                get { return ((SettingsRow) (Rows[index])); }
            }

            #region IEnumerable Members

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            #endregion

            public event SettingsRowChangeEventHandler SettingsRowChanged;

            public event SettingsRowChangeEventHandler SettingsRowChanging;

            public event SettingsRowChangeEventHandler SettingsRowDeleted;

            public event SettingsRowChangeEventHandler SettingsRowDeleting;

            public void AddSettingsRow(SettingsRow row)
            {
                Rows.Add(row);
            }

            public SettingsRow AddSettingsRow(ModuleRow parentModuleRowByModule_Settings)
            {
                var rowSettingsRow = ((SettingsRow) (NewRow()));
                rowSettingsRow.ItemArray = new object[]
                                               {
                                                   null,
                                                   parentModuleRowByModule_Settings[0]
                                               };
                Rows.Add(rowSettingsRow);
                return rowSettingsRow;
            }

            public override DataTable Clone()
            {
                var cln = ((SettingsDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new SettingsDataTable();
            }

            internal void InitVars()
            {
                columnSettings_Id = Columns["Settings_Id"];
                columnModuleId = Columns["ModuleId"];
            }

            private void InitClass()
            {
                columnSettings_Id = new DataColumn("Settings_Id", typeof (int), null, MappingType.Hidden);
                Columns.Add(columnSettings_Id);
                columnModuleId = new DataColumn("ModuleId", typeof (int), null, MappingType.Hidden);
                Columns.Add(columnModuleId);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
                                                                        {
                                                                            columnSettings_Id
                                                                        }, true));
                columnSettings_Id.AutoIncrement = true;
                columnSettings_Id.AllowDBNull = false;
                columnSettings_Id.Unique = true;
            }

            public SettingsRow NewSettingsRow()
            {
                return ((SettingsRow) (NewRow()));
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SettingsRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof (SettingsRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((SettingsRowChanged != null))
                {
                    SettingsRowChanged(this, new SettingsRowChangeEvent(((SettingsRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((SettingsRowChanging != null))
                {
                    SettingsRowChanging(this, new SettingsRowChangeEvent(((SettingsRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((SettingsRowDeleted != null))
                {
                    SettingsRowDeleted(this, new SettingsRowChangeEvent(((SettingsRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((SettingsRowDeleting != null))
                {
                    SettingsRowDeleting(this, new SettingsRowChangeEvent(((SettingsRow) (e.Row)), e.Action));
                }
            }

            public void RemoveSettingsRow(SettingsRow row)
            {
                Rows.Remove(row);
            }
        }

        #endregion

        #region Nested type: SettingsRow

        [DebuggerStepThrough()]
        public class SettingsRow : DataRow
        {
            private SettingsDataTable tableSettings;

            internal SettingsRow(DataRowBuilder rb) :
                base(rb)
            {
                tableSettings = ((SettingsDataTable) (Table));
            }

            public ModuleRow ModuleRow
            {
                get { return ((ModuleRow) (GetParentRow(Table.ParentRelations["Module_Settings"]))); }
                set { SetParentRow(value, Table.ParentRelations["Module_Settings"]); }
            }

            public SettingRow[] GetSettingRows()
            {
                return ((SettingRow[]) (GetChildRows(Table.ChildRelations["Settings_Setting"])));
            }
        }

        #endregion

        #region Nested type: SettingsRowChangeEvent

        [DebuggerStepThrough()]
        public class SettingsRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private SettingsRow eventRow;

            public SettingsRowChangeEvent(SettingsRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            public SettingsRow Row
            {
                get { return eventRow; }
            }

            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion

        #region Nested type: TabDataTable

        [DebuggerStepThrough()]
        public class TabDataTable : DataTable, IEnumerable
        {
            private DataColumn columnAccessRoles;
            private DataColumn columnMobileTabName;
            private DataColumn columnShowMobile;
            private DataColumn columnTabId;

            private DataColumn columnTabName;

            private DataColumn columnTabOrder;

            internal TabDataTable() :
                base("Tab")
            {
                InitClass();
            }

            internal TabDataTable(DataTable table) :
                base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }

            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            internal DataColumn TabIdColumn
            {
                get { return columnTabId; }
            }

            internal DataColumn TabNameColumn
            {
                get { return columnTabName; }
            }

            internal DataColumn AccessRolesColumn
            {
                get { return columnAccessRoles; }
            }

            internal DataColumn TabOrderColumn
            {
                get { return columnTabOrder; }
            }

            internal DataColumn ShowMobileColumn
            {
                get { return columnShowMobile; }
            }

            internal DataColumn MobileTabNameColumn
            {
                get { return columnMobileTabName; }
            }

            public TabRow this[int index]
            {
                get { return ((TabRow) (Rows[index])); }
            }

            #region IEnumerable Members

            public IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            #endregion

            public event TabRowChangeEventHandler TabRowChanged;

            public event TabRowChangeEventHandler TabRowChanging;

            public event TabRowChangeEventHandler TabRowDeleted;

            public event TabRowChangeEventHandler TabRowDeleting;

            public void AddTabRow(TabRow row)
            {
                Rows.Add(row);
            }

            public TabRow AddTabRow(int TabId, string TabName, string AccessRoles, int TabOrder, bool ShowMobile,
                                    string MobileTabName)
            {
                var rowTabRow = ((TabRow) (NewRow()));
                rowTabRow.ItemArray = new object[]
                                          {
                                              TabId,
                                              TabName,
                                              AccessRoles,
                                              TabOrder,
                                              ShowMobile,
                                              MobileTabName
                                          };
                Rows.Add(rowTabRow);
                return rowTabRow;
            }

            public TabRow FindByTabId(int TabId)
            {
                return ((TabRow) (Rows.Find(new object[]
                                                {
                                                    TabId
                                                })));
            }

            public override DataTable Clone()
            {
                var cln = ((TabDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new TabDataTable();
            }

            internal void InitVars()
            {
                columnTabId = Columns["TabId"];
                columnTabName = Columns["TabName"];
                columnAccessRoles = Columns["AccessRoles"];
                columnTabOrder = Columns["TabOrder"];
                columnShowMobile = Columns["ShowMobile"];
                columnMobileTabName = Columns["MobileTabName"];
            }

            private void InitClass()
            {
                columnTabId = new DataColumn("TabId", typeof (int), null, MappingType.Attribute);
                Columns.Add(columnTabId);
                columnTabName = new DataColumn("TabName", typeof (string), null, MappingType.Attribute);
                Columns.Add(columnTabName);
                columnAccessRoles = new DataColumn("AccessRoles", typeof (string), null, MappingType.Attribute);
                Columns.Add(columnAccessRoles);
                columnTabOrder = new DataColumn("TabOrder", typeof (int), null, MappingType.Attribute);
                Columns.Add(columnTabOrder);
                columnShowMobile = new DataColumn("ShowMobile", typeof (bool), null, MappingType.Attribute);
                Columns.Add(columnShowMobile);
                columnMobileTabName = new DataColumn("MobileTabName", typeof (string), null, MappingType.Attribute);
                Columns.Add(columnMobileTabName);
                Constraints.Add(new UniqueConstraint("TabKey", new DataColumn[]
                                                                   {
                                                                       columnTabId
                                                                   }, true));
                columnTabId.AllowDBNull = false;
                columnTabId.Unique = true;
                columnTabId.Namespace = "";
                columnTabName.Namespace = "";
                columnAccessRoles.Namespace = "";
                columnTabOrder.Namespace = "";
                columnShowMobile.Namespace = "";
                columnMobileTabName.Namespace = "";
            }

            public TabRow NewTabRow()
            {
                return ((TabRow) (NewRow()));
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TabRow(builder);
            }

            protected override Type GetRowType()
            {
                return typeof (TabRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((TabRowChanged != null))
                {
                    TabRowChanged(this, new TabRowChangeEvent(((TabRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((TabRowChanging != null))
                {
                    TabRowChanging(this, new TabRowChangeEvent(((TabRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((TabRowDeleted != null))
                {
                    TabRowDeleted(this, new TabRowChangeEvent(((TabRow) (e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((TabRowDeleting != null))
                {
                    TabRowDeleting(this, new TabRowChangeEvent(((TabRow) (e.Row)), e.Action));
                }
            }

            public void RemoveTabRow(TabRow row)
            {
                Rows.Remove(row);
            }
        }

        #endregion

        #region Nested type: TabRow

        [DebuggerStepThrough()]
        public class TabRow : DataRow
        {
            private TabDataTable tableTab;

            internal TabRow(DataRowBuilder rb) :
                base(rb)
            {
                tableTab = ((TabDataTable) (Table));
            }

            public int TabId
            {
                get { return ((int) (this[tableTab.TabIdColumn])); }
                set { this[tableTab.TabIdColumn] = value; }
            }

            public string TabName
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableTab.TabNameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableTab.TabNameColumn] = value; }
            }

            public string AccessRoles
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableTab.AccessRolesColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableTab.AccessRolesColumn] = value; }
            }

            public int TabOrder
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableTab.TabOrderColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableTab.TabOrderColumn] = value; }
            }

            public bool ShowMobile
            {
                get
                {
                    try
                    {
                        return ((bool) (this[tableTab.ShowMobileColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableTab.ShowMobileColumn] = value; }
            }

            public string MobileTabName
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableTab.MobileTabNameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set { this[tableTab.MobileTabNameColumn] = value; }
            }

            public bool IsTabNameNull()
            {
                return IsNull(tableTab.TabNameColumn);
            }

            public void SetTabNameNull()
            {
                this[tableTab.TabNameColumn] = Convert.DBNull;
            }

            public bool IsAccessRolesNull()
            {
                return IsNull(tableTab.AccessRolesColumn);
            }

            public void SetAccessRolesNull()
            {
                this[tableTab.AccessRolesColumn] = Convert.DBNull;
            }

            public bool IsTabOrderNull()
            {
                return IsNull(tableTab.TabOrderColumn);
            }

            public void SetTabOrderNull()
            {
                this[tableTab.TabOrderColumn] = Convert.DBNull;
            }

            public bool IsShowMobileNull()
            {
                return IsNull(tableTab.ShowMobileColumn);
            }

            public void SetShowMobileNull()
            {
                this[tableTab.ShowMobileColumn] = Convert.DBNull;
            }

            public bool IsMobileTabNameNull()
            {
                return IsNull(tableTab.MobileTabNameColumn);
            }

            public void SetMobileTabNameNull()
            {
                this[tableTab.MobileTabNameColumn] = Convert.DBNull;
            }

            public ModuleRow[] GetModuleRows()
            {
                return ((ModuleRow[]) (GetChildRows(Table.ChildRelations["Tab_Module"])));
            }
        }

        #endregion

        #region Nested type: TabRowChangeEvent

        [DebuggerStepThrough()]
        public class TabRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private TabRow eventRow;

            public TabRowChangeEvent(TabRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            public TabRow Row
            {
                get { return eventRow; }
            }

            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion
    }
}